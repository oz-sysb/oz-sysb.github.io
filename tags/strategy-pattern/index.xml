<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Strategy Pattern on OZVISION Tech Blog</title><link>http://techblog.oz-vision.co.jp/tags/strategy-pattern/</link><description>Recent content in Strategy Pattern on OZVISION Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© OZVISION Inc.</copyright><lastBuildDate>Mon, 25 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://techblog.oz-vision.co.jp/tags/strategy-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>ハピタスの「カテゴリーランキング」の新機能にStrategyパターンで実装してみた。</title><link>http://techblog.oz-vision.co.jp/blog/strategy-pattern/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/strategy-pattern/</guid><description>はじめに こんにちは、オズビジョン開発ユニットの李です。ハピタスのトップページにおける新機能「カテゴリーランキング」の開発において、私たちは「Strategyパターン」を学び、その理念を実装に応用しました。この記事では、「Strategyパターン」を用いて新機能を開発する過程について共有いたします。
Strategyパターンの採用理由 「カテゴリーランキング」の要件を確認すると、10個のカテゴリーそれぞれに合致するランキングを表示する必要がありました。初めは、このランキングに対して、以下のようなswitch-case文を用いて実装しました。
switch ($category) { case category1: // category1処理 break; case category2: // category2処理 break; // ... 他のカテゴリーについても同様に記述 case category10: // category10処理 break; } switch-case文を使用することで、上記のようなコードが生まれました。コードの省略があるため、簡潔に見えるかもしれません。省略されたコードを簡単に説明すると、基本各カテゴリー案件の中で、一定期間中に利用数が高い案件を探します。（一部例外があります。）その中で「特定フラグ」、「除外条件」、「カテゴリーの大分類＆小分類連係」など複雑な条件があります。カテゴリ毎に条件が異なるので抽出処理が複雑であります。期間や要件によって、新しいカテゴリーランキングが追加されたり、既存カテゴリーがなくなる可能性があるので、メンテナンスや運用の観点で考える必要がありました。そこで、「もっとスマートな方法はないか？」と考えたところ、「Strategyパターン」の活用についてのレビューコメントが提案されました。その後、「Strategyパターン」の調査を行い、開発と運用の効率性向上が期待できることから、このパターンを採用することを決定しました。このパターンを採用することで、以下の利点が期待されました。
可読性の向上: Strategyパターンは、異なる戦略（Strategy）をクラスとして抽象化し、それぞれの戦略を別々のクラスに分ける方法です。これにより、コードが簡潔で理解しやすくなりました。</description></item></channel></rss>