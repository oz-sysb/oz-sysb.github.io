[{"content":"","date":"2023-09-29","permalink":"/blog/","section":"","summary":"","title":""},{"content":"","date":"2023-09-29","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"2023-09-29","permalink":"/tags/aws/","section":"Tags","summary":"","title":"AWS"},{"content":"こんにちは、開発ユニット(SRE) の卜部です。\nハピタスの基盤にはAmazon Web Services（以下AWSと記載）を使用しています。その基盤の運用にはAWS Cloud Development Kit（以下CDKと記載）を2023年1月から導入しました。今回は、CDK v2を使用している経験を共有し、どれだけ運用が向上したかについてお話しします。\nメリット TypeScriptとCDKの組み合わせを活用することで、プログラムの記述がスムーズに行え、VSCodeなどのエディタで補完機能が利用でき、関数の説明などが即座に確認できます。 単体テストが容易に実行でき、デグレーションのリスクが低減します。 既存のデプロイ済みリソースとの差分を手元で確認できるため、運用中のトラブルシューティングが効率的に行えます。 リソース間の依存関係や呼び出し関係を視覚的に理解しやすくなりました。 導入前の課題 導入前、手動でAWSコンソール上にリソースを作成する作業と、 CloudFormationテンプレートを使用してリソースの作成、更新、削除を行う作業が混在していました。\nまた、リソースの命名規則が統一されておらず、リソースの用途が明確でない状態でした。\nこれにより、どのリソースがどのような目的で構築されたのかを理解することが難しく、調査と運用に余計な時間がかかっていました。\n導入のタイミングで行ったこと 言語の選定 フロントエンドでReact + TypeScriptを使用していたため、静的型付け言語であり、エディタの補完機能が優れているTypeScriptを採用しました。 導入計画の策定 新しいリソースの作成にはCDKを使用し、既存のリソースのバージョンアップや変更時にCDKに移行する方針を採用しました。AWS Summit、AWS Dev Dayなどの外部イベントに参加し、AWSのソリューションアーキテクトからの意見も取り入れ、CDKの導入にメリットしか感じなかったため、他の選択肢を検討しなかったのです。 TypeScript + CDKの組み合わせ TypeScriptはフロントエンドやサーバーサイドのエンジニアにとっても馴染み深い言語であり、 リソースの状態を共有するのに適しています。\nSREメンバーもTypeScriptやNode.jsに抵抗がないため、CDKの導入はスムーズに進行しました。\nまた、リソースの作成時に補完機能が利用でき、必要な定義が明確になるため、 リソースの作成作業が迅速に進行できるようになりました。 CDK v2の導入により、ハピタスのインフラストラクチャが大幅に向上し、運用効率が飛躍的に向上しました。\nUnit Test が使えるため、デグレの心配が減る cdk 構築時にすぐ導入したのが Snapshot test です。 これを使うことでリファクタリングを恐れず実施できることと、変更のあった差分がテスト失敗の差分になるので 実装者にその差分であっているのか意識させることができる\n既存のデプロイ済みのリソースと diff で手元で差分を確認できる 既存のリソースとの差分を確認できる機能はCloudFormationにも備わっていますが、 CDKの場合、ただ cdk diff と入力するだけで済みます。 このわずかなコマンドだけで、AWSコンソールを開くことなく、手元で全体のリソースの差分を確認できるのです。\nAWSコンソールで差分を確認する手順と手元での確認の速さとの間には圧倒的な差があり、これに感銘を受けました。\nリソース間の依存関係を可視化しやすい スタック管理、リソースの定義、ディレクトリ構造など、どのように整理すべきかを一度整理すれば、 それに従ってリソースがどこで管理されているかが直感的に理解できます。\nまとめ 運用を安全かつ安定的に行うために、CDKは非常に有用であることが確認されました。 導入から1年経っていない状況ですが、社内ではCDKが不可欠なツールとなっています。\n最終的にはCDKを使用して、あらゆるリソースをわかりやすく運用管理したいとの目標を掲げています。\n","date":"2023-09-29","permalink":"/blog/migration-infra-to-cdkv2/","section":"","summary":"こんにちは、開発ユニット(SRE) の卜部です。\nハピタスの基盤にはAmazon Web Services（以下AWSと記載）を使用しています。その基盤の運用にはAWS Cloud Development Kit（以下CDKと記載）を2023年1月から導入しました。今回は、CDK v2を使用している経験を共有し、どれだけ運用が向上したかについてお話しします。\nメリット TypeScriptとCDKの組み合わせを活用することで、プログラムの記述がスムーズに行え、VSCodeなどのエディタで補完機能が利用でき、関数の説明などが即座に確認できます。 単体テストが容易に実行でき、デグレーションのリスクが低減します。 既存のデプロイ済みリソースとの差分を手元で確認できるため、運用中のトラブルシューティングが効率的に行えます。 リソース間の依存関係や呼び出し関係を視覚的に理解しやすくなりました。 導入前の課題 導入前、手動でAWSコンソール上にリソースを作成する作業と、 CloudFormationテンプレートを使用してリソースの作成、更新、削除を行う作業が混在していました。\nまた、リソースの命名規則が統一されておらず、リソースの用途が明確でない状態でした。\nこれにより、どのリソースがどのような目的で構築されたのかを理解することが難しく、調査と運用に余計な時間がかかっていました。\n導入のタイミングで行ったこと 言語の選定 フロントエンドでReact + TypeScriptを使用していたため、静的型付け言語であり、エディタの補完機能が優れているTypeScriptを採用しました。 導入計画の策定 新しいリソースの作成にはCDKを使用し、既存のリソースのバージョンアップや変更時にCDKに移行する方針を採用しました。AWS Summit、AWS Dev Dayなどの外部イベントに参加し、AWSのソリューションアーキテクトからの意見も取り入れ、CDKの導入にメリットしか感じなかったため、他の選択肢を検討しなかったのです。 TypeScript + CDKの組み合わせ TypeScriptはフロントエンドやサーバーサイドのエンジニアにとっても馴染み深い言語であり、 リソースの状態を共有するのに適しています。","title":"CDK v2 の導入でハピタスのインフラが進化！"},{"content":"","date":"2023-09-29","permalink":"/tags/cdkv2/","section":"Tags","summary":"","title":"CDKv2"},{"content":"","date":"2023-09-29","permalink":"/","section":"OZVISION Tech Blog","summary":"","title":"OZVISION Tech Blog"},{"content":"","date":"2023-09-29","permalink":"/authors/s-urabe/","section":"Authors","summary":"","title":"s-urabe"},{"content":"","date":"2023-09-29","permalink":"/tags/sre/","section":"Tags","summary":"","title":"SRE"},{"content":"","date":"2023-09-29","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2023-09-29","permalink":"/tags/typescript/","section":"Tags","summary":"","title":"TypeScript"},{"content":"","date":"2023-09-25","permalink":"/authors/j-lee/","section":"Authors","summary":"","title":"j-lee"},{"content":"","date":"2023-09-25","permalink":"/tags/strategy-pattern/","section":"Tags","summary":"","title":"Strategy Pattern"},{"content":" はじめに こんにちは、オズビジョン開発ユニットの李です。ハピタスのトップページにおける新機能「カテゴリーランキング」の開発において、私たちは「Strategyパターン」を学び、その理念を実装に応用しました。この記事では、「Strategyパターン」を用いて新機能を開発する過程について共有いたします。\nStrategyパターンの採用理由 「カテゴリーランキング」の要件を確認すると、10個のカテゴリーそれぞれに合致するランキングを表示する必要がありました。初めは、このランキングに対して、以下のようなswitch-case文を用いて実装しました。\nswitch ($category) { case category1: // category1処理 break; case category2: // category2処理 break; // ... 他のカテゴリーについても同様に記述 case category10: // category10処理 break; } switch-case文を使用することで、上記のようなコードが生まれました。コードの省略があるため、簡潔に見えるかもしれません。省略されたコードを簡単に説明すると、基本各カテゴリー案件の中で、一定期間中に利用数が高い案件を探します。（一部例外があります。）その中で「特定フラグ」、「除外条件」、「カテゴリーの大分類＆小分類連係」など複雑な条件があります。カテゴリ毎に条件が異なるので抽出処理が複雑であります。期間や要件によって、新しいカテゴリーランキングが追加されたり、既存カテゴリーがなくなる可能性があるので、メンテナンスや運用の観点で考える必要がありました。そこで、「もっとスマートな方法はないか？」と考えたところ、「Strategyパターン」の活用についてのレビューコメントが提案されました。その後、「Strategyパターン」の調査を行い、開発と運用の効率性向上が期待できることから、このパターンを採用することを決定しました。このパターンを採用することで、以下の利点が期待されました。\n可読性の向上: Strategyパターンは、異なる戦略（Strategy）をクラスとして抽象化し、それぞれの戦略を別々のクラスに分ける方法です。これにより、コードが簡潔で理解しやすくなりました。\n保守性の向上: 新しいカテゴリーの追加や既存カテゴリーの変更が容易になりました。新しい戦略を追加するだけで済み、既存の戦略に変更があっても他の部分への影響を最小限に抑えられます。\n拡張性の向上: Strategyパターンを使用することで、新しい戦略を追加し、既存の戦略を変更することが容易になりました。これにより、要件の変更に柔軟に対応できます。\n効率性の向上: 各戦略を最適化することが容易になり、実行時の性能向上が期待できます。\n運用の簡素化: Strategyパターンを用いたコードは運用と保守が容易であり、エラーの発生リスクが低減します。\n以上の理由から、Strategyパターンの導入が採択され、コードの品質、保守性、拡張性、効率性、運用性の向上が期待されています。この決定により、より洗練されたアーキテクチャが実現し、開発プロセスが改善されると思われます。\nクラス図 Strategyパターンによる実装 interface CategoryInterface { public function getItems(); } 各カテゴリーに対応するための共通インターフェースCategoryInterfaceを定義し、getItems()メソッドを使用してランキング情報を取得します。\nclass Category1 implements CategoryInterface { public function getItems() { // ... 省略 } } 各カテゴリーに関連する処理を記述します。\n//context $items = $strategy-\u0026gt;getItems(); 最後に、コンテキスト内で必要なカテゴリーのメソッドを呼び出します。\n結果画面 https://hapitas.jp/#category-tabs (登録・ログインが必要です)\n上記の画像のように、ユーザーが各カテゴリーを選択すると、そのカテゴリーに対応するランキング情報が表示されるようになりました。\nまとめ 「Strategyパターン」を理解し、ハピタスの「カテゴリーランキング」新機能を実装しました。このパターンは新しいプログラミング言語でも容易に適用でき、試す価値があると考えています。\n","date":"2023-09-25","permalink":"/blog/strategy-pattern/","section":"","summary":"はじめに こんにちは、オズビジョン開発ユニットの李です。ハピタスのトップページにおける新機能「カテゴリーランキング」の開発において、私たちは「Strategyパターン」を学び、その理念を実装に応用しました。この記事では、「Strategyパターン」を用いて新機能を開発する過程について共有いたします。\nStrategyパターンの採用理由 「カテゴリーランキング」の要件を確認すると、10個のカテゴリーそれぞれに合致するランキングを表示する必要がありました。初めは、このランキングに対して、以下のようなswitch-case文を用いて実装しました。\nswitch ($category) { case category1: // category1処理 break; case category2: // category2処理 break; // ... 他のカテゴリーについても同様に記述 case category10: // category10処理 break; } switch-case文を使用することで、上記のようなコードが生まれました。コードの省略があるため、簡潔に見えるかもしれません。省略されたコードを簡単に説明すると、基本各カテゴリー案件の中で、一定期間中に利用数が高い案件を探します。（一部例外があります。）その中で「特定フラグ」、「除外条件」、「カテゴリーの大分類＆小分類連係」など複雑な条件があります。カテゴリ毎に条件が異なるので抽出処理が複雑であります。期間や要件によって、新しいカテゴリーランキングが追加されたり、既存カテゴリーがなくなる可能性があるので、メンテナンスや運用の観点で考える必要がありました。そこで、「もっとスマートな方法はないか？」と考えたところ、「Strategyパターン」の活用についてのレビューコメントが提案されました。その後、「Strategyパターン」の調査を行い、開発と運用の効率性向上が期待できることから、このパターンを採用することを決定しました。このパターンを採用することで、以下の利点が期待されました。\n可読性の向上: Strategyパターンは、異なる戦略（Strategy）をクラスとして抽象化し、それぞれの戦略を別々のクラスに分ける方法です。これにより、コードが簡潔で理解しやすくなりました。","title":"ハピタスの「カテゴリーランキング」の新機能にStrategyパターンで実装してみた。"},{"content":"こんにちは！\nオズビジョン開発ユニット（ハピタス）の天野です。\nこの記事では、Slack内での「timesチャンネルを活用したコミュニケーション」について紹介します。\ntimesチャンネルとは何か timesチャンネルは、いわゆる「分報」を共有する場所です。オズビジョンのエンジニアたちは、プロジェクト進行中に気づいたこと、学んだこと、また業務には関係しないが共有したいことなど、自由に情報を発信できます。\n開発ユニット（ハピタス）のほぼ半数のエンジニアが自分専用のチャンネルを所有しており、それぞれのチャンネル名は「times-」から始まることで、そのチャンネルがtimesチャンネルであることが明確に示されています。\ntimesチャンネルの活用例 以下に、実際にtimesチャンネルで活用されている例を紹介します。\n簡単な進捗共有 疑問をつぶやく 休憩のお知らせ 特に休憩連絡をするルールはありませんが、個人の気分で「きゅうけいっ」スタンプをtimesチャンネルに投稿することがあります。\nトッポ食べたい ランチのメンバーを募集 急遽募集した結果、4人集まりました笑\n使ってみたら便利だったツールを共有 timesチャンネルを導入して感じたメリット 質問のハードルが下がった 業務中に疑問が生じた場合、timesチャンネルで簡単に質問できるため、知識豊富なメンバーから迅速な回答を受けることができます。特に、新入社員や特定のドメインに精通していないメンバーにとって、timesチャンネルは知識の補完として非常に役立っています。\n知識の共有が促進される 業務中に得た新しい知識や情報をtimesチャンネルにメモすることで、他のメンバーもそれを共有できます。また、このメモはSlackの検索機能で見つけやすいため、将来的に同じ問題にぶつかったときに役立つことがあります。\n業務以外の話題で盛り上がれる timesチャンネルの使い方は個人の自由であり、メンバーは休日の旅行写真やランチの内容など、業務以外のトピックについても自由に投稿します。こうした楽しい話題を通じて、チームメンバー同士の関係性が深まったり、「人となり」を知れたりします。\n業務以外の話題を共有できるtimesチャンネルは、コミュニケーションの促進と楽しい雰囲気作りにもつながっています。\n感想 2023年9月現在、弊社では週に2日の出社が原則となっています。このため、リモートワーク中のメンバーとのコミュニケーションも重要です。timesチャンネルは、テキストベースのコミュニケーションを円滑にし、リモート環境でのコミュニケーションに役立っています。\n最後までお読みいただき、ありがとうございました。\n","date":"2023-09-19","permalink":"/blog/times-ch-slack/","section":"","summary":"こんにちは！\nオズビジョン開発ユニット（ハピタス）の天野です。\nこの記事では、Slack内での「timesチャンネルを活用したコミュニケーション」について紹介します。\ntimesチャンネルとは何か timesチャンネルは、いわゆる「分報」を共有する場所です。オズビジョンのエンジニアたちは、プロジェクト進行中に気づいたこと、学んだこと、また業務には関係しないが共有したいことなど、自由に情報を発信できます。\n開発ユニット（ハピタス）のほぼ半数のエンジニアが自分専用のチャンネルを所有しており、それぞれのチャンネル名は「times-」から始まることで、そのチャンネルがtimesチャンネルであることが明確に示されています。\ntimesチャンネルの活用例 以下に、実際にtimesチャンネルで活用されている例を紹介します。\n簡単な進捗共有 疑問をつぶやく 休憩のお知らせ 特に休憩連絡をするルールはありませんが、個人の気分で「きゅうけいっ」スタンプをtimesチャンネルに投稿することがあります。\nトッポ食べたい ランチのメンバーを募集 急遽募集した結果、4人集まりました笑\n使ってみたら便利だったツールを共有 timesチャンネルを導入して感じたメリット 質問のハードルが下がった 業務中に疑問が生じた場合、timesチャンネルで簡単に質問できるため、知識豊富なメンバーから迅速な回答を受けることができます。特に、新入社員や特定のドメインに精通していないメンバーにとって、timesチャンネルは知識の補完として非常に役立っています。\n知識の共有が促進される 業務中に得た新しい知識や情報をtimesチャンネルにメモすることで、他のメンバーもそれを共有できます。また、このメモはSlackの検索機能で見つけやすいため、将来的に同じ問題にぶつかったときに役立つことがあります。\n業務以外の話題で盛り上がれる timesチャンネルの使い方は個人の自由であり、メンバーは休日の旅行写真やランチの内容など、業務以外のトピックについても自由に投稿します。こうした楽しい話題を通じて、チームメンバー同士の関係性が深まったり、「人となり」を知れたりします。\n業務以外の話題を共有できるtimesチャンネルは、コミュニケーションの促進と楽しい雰囲気作りにもつながっています。\n感想 2023年9月現在、弊社では週に2日の出社が原則となっています。このため、リモートワーク中のメンバーとのコミュニケーションも重要です。timesチャンネルは、テキストベースのコミュニケーションを円滑にし、リモート環境でのコミュニケーションに役立っています。\n最後までお読みいただき、ありがとうございました。","title":"timesチャンネルを活用したコミュニケーション"},{"content":"","date":"2023-09-19","permalink":"/authors/y-amano/","section":"Authors","summary":"","title":"y-amano"},{"content":"","date":"2023-09-19","permalink":"/tags/%E3%82%BF%E3%82%B0/","section":"Tags","summary":"","title":"タグ"},{"content":"","date":"2023-09-15","permalink":"/tags/symfony/","section":"Tags","summary":"","title":"Symfony"},{"content":" はじめに こんにちは！\nオズビジョン開発ユニット（ハピタス）の木山です。\n今回はWebの開発をする上でよく耳にするN+1問題についてSymfonyとMySQLの環境で検証をしてみようと思います！\nN+1問題とは？ まずはじめにN+1問題について簡単におさらいしておきます。\n前提として、データベースにUsersテーブルとCommentsテーブルが存在している簡単なSNSアプリケーションを考えてみます。\nここで、全ユーザーの全コメントを表示する機能を実装したいです。\nその際、UsersテーブルからUserの一覧を取得し、各ユーザーのIDを用いてCommentsテーブルのユーザーに紐づくデータも取得します。\nこの際、発行されるクエリに着目をすると、\n// UsersテーブルからUserのid一覧を取得 select id from Users; // Commentsテーブルから特定UserのCommentを取得 （これをUserの人数分繰り返す） select * from Comments where user_id = ?; 上記のようなクエリになります。\n例えばユーザーが10人いると、以下のようなイメージです。\nこの時発行されるクエリの件数に着目すると\nこのようになります。\n出力イメージの箇所をクエリの発行回数にしています。\nまず最初にUsersテーブルから全ユーザーのデータを取得するクエリを1回。\nそして、Commentsテーブルからユーザーの全コメントを取得するクエリを1回づつx10ユーザー分(計10回)。\nそれらを足し合わせると11回のクエリが実行されることがわかるかと思います。\nつまり、10人のユーザーで11回のクエリです。\n是非このユーザー数を自由に変えてご自身でも考えてみてください。\n何か見えてきましたか?\nそうなんです、ユーザー数を仮にNとすると、発行されるクエリの件数は常にN+1になります。\nこれがN+1問題の由来となります！\n言葉で簡単にまとめると、\nUserがN人いて、そのユーザーに紐づくコメントを取得する場合、ユーザーの一覧を取得するクエリ(1回)と、ユーザーごとのコメントを取得するクエリ(N回)の、計N+1回のクエリが発行されてしまうこと\nをN+1問題と言います。\n何故問題？ さて、先ほどN+1問題について簡単に確認しましたが、何故\u0026quot;問題\u0026quot;と呼ばれるのでしょうか？\nこれには明確に答えがあり、\u0026ldquo;処理速度\u0026quot;が大きな問題と言われています。\nNの数が大きくなれば大きくなるほどデータベースへの問い合わせの回数が増え、その結果、サービスのパフォーマンスに甚大な影響を及ぼしてしまいます。\n例えばWebサービスなら、ページへアクセスして何十秒何百秒と待つ\u0026hellip;なんて、今のご時世では考えられないですが、このN+1が起きてしまうとそれが起きてしまうかもしれません。\n対処法は？ 今回問題になっているのが、N回クエリを発行してしまっている部分です。\nユーザーの一覧を取得したあと、CommentテーブルにJOINし、IN句を利用すれば問い合わせは一回ですみ、たった二回のクエリ発行で全件分のデータを取得することができます。\nつまり、Commentsテーブルからのデータ取得を一人づつではなく、一括でできるように工夫してあげればOKです。\nこの後の検証でN+1が発生する場合、しない場合の検証も行っていきます。\nN+1問題を検証してみる！ では、今からN+1問題を検証してみようと思います！\nまず前提として、以下のようなテーブルで考えていきます。\nUserテーブルに対して、0~n件のコメントが紐づく形でリレーションを持っているテーブルです。\nユーザーごとのコメントはどのユーザーも5件固定で、ユーザー数Nに関しては先ほどの解説に合わせ、N=10で検証をしていきます。\nまた、検証に用いたSymfony, PHP, MySQL周りのバージョンは以下の通りです。\n-------------------- --------------------------------- Symfony -------------------- --------------------------------- Version 6.3.1 Long-Term Support No End of maintenance 01/2024 (in +133 days) End of life 01/2024 (in +133 days) -------------------- --------------------------------- PHP -------------------- --------------------------------- Version 8.2.8 Architecture 64 bits Intl locale ja_JP Timezone UTC (2023-09-20T02:23:41+00:00) OPcache true APCu false Xdebug false -------------------- --------------------------------- mysql\u0026gt; SELECT VERSION(); +-----------+ | VERSION() | +-----------+ | 8.0.33 | +-----------+ 1 row in set (0.00 sec) N+1問題が起きる場合 それではまずはN+1が起きる場合を検証していきます。\nまずはUserのIDを全件取得する処理です。\npublic function findAllIds(): array { $conn = $this-\u0026gt;getEntityManager()-\u0026gt;getConnection(); $sql = \u0026#34;SELECT id FROM user\u0026#34;; $stmt = $conn-\u0026gt;executeQuery($sql); $ids = []; while ($row = $stmt-\u0026gt;fetchAssociative()) { $ids[] = $row[\u0026#39;id\u0026#39;]; } return $ids; } 説明は不要かなと思いますが、\u0026ldquo;SELECT id FROM user\u0026quot;というクエリをSymfonyで発行する処理になっています。\n条件なしで全ユーザーのIDを取得します。\n次にユーザーごとのコメントを取得する処理です。\npublic function findByUserId($userId): array { $conn = $this-\u0026gt;getEntityManager()-\u0026gt;getConnection(); $sql = \u0026#39; SELECT * FROM comment c WHERE c.user_id = :user_id ORDER BY c.id ASC \u0026#39;; $stmt = $conn-\u0026gt;executeQuery($sql, [\u0026#39;user_id\u0026#39; =\u0026gt; $userId]); return $stmt-\u0026gt;fetchAllAssociative(); } こちらは\u0026quot;select * from comment where comment.user_id = ?;\u0026ldquo;といったクエリを発行する処理になっています。\nこのuseridでユーザーに紐づくコメントを一括で取得する処理がN回呼ばれる想定です。\nそして、それらの処理を呼び出すコントローラーが以下のようになっています。\n// UserのID一覧の取得 $userIds = $entityManager-\u0026gt;getRepository(User::class)-\u0026gt;findAllIds(); // UserIDごとにコメントを取得 $comments = []; foreach ($userIds as $userId) { $comments[$userId] = $entityManager -\u0026gt;getRepository(Comment::class) -\u0026gt;findByUserId($userId); } 最初に$userIdsとして、findAllIds関数でユーザーのID一覧を取得し、その後foreachで一件づつコメントも取得しています。\nクエリの実行時間の測定はSymfonyで確認できるデバッグツールがあったので、その内容を参照します。\n実行すると\u0026hellip;?\nSymfonyのデバッグツールの画面で、Database Queriesの件数が確かに11件（N=10の場合の合計クエリ数）になっていますね。\nクエリの詳細も見てみると、一件目でユーザーの一覧を取得していて、それ以降はコメントを取得しているのがわかるかと思います。\n実行時間は3.54msですね。\nN+1が起きる場合に関しては確認できました！\nN+1問題が起きない場合 では、今度はN+1問題が起きない場合も試してみます。\nまずはUserのIDを全件取得する処理ですが、こちらは先ほどと同じで問題ないため、N+1が発生する場合と同様のfindAllIdsメソッドを利用します。\n次にユーザーのIDをまとめて、コメント一覧を取得する処理です。\npublic function findByUserIds($userIds): array { $conn = $this-\u0026gt;getEntityManager()-\u0026gt;getConnection(); $placeholders = implode(\u0026#39;,\u0026#39;, array_fill(0, count($userIds), \u0026#39;?\u0026#39;)); $sql = \u0026#34; SELECT * FROM user JOIN comment ON user.id = comment.user_id WHERE user.id IN ($placeholders) \u0026#34;; $stmt = $conn-\u0026gt;executeQuery($sql, $userIds); $results = []; while ($row = $stmt-\u0026gt;fetchAssociative()) { $results[] = $row; } return $results; } ご覧いただくとわかりますが、SQL部分は\nSELECT * FROM user JOIN comment ON user.id = comment.user_id WHERE user.id IN ($placeholders) となっています。\nSQLインジェクションの対策をしているので、少し加工していますが、ユーザーのID一覧をIN句に渡しています。\nこうすることで、コメント一覧取得はユーザーが何人いても発行されるクエリは一件になるはずです。\nそして、上記処理を呼び出すコントローラーは以下の通りです。\n// UserのID一覧の取得 $userIds = $entityManager-\u0026gt;getRepository(User::class)-\u0026gt;findAllIds(); // UserIDの一覧からコメントを全件取得 $comments = []; $result = $entityManager-\u0026gt;getRepository(Comment::class)-\u0026gt;findByUserIds($userIds); PHP上にforのループ処理が不要になったので可読性も上がった気がします。\nそして実行結果は？\n発行されているクエリは2件、時間は1.64msになっていますね。\nそしてクエリ詳細をみると、ユーザーを全件取得、そしてそのユーザーIDから一つのクエリで10人分のCommentを取得できていることがわかります!\n比較結果 最後に、N=10の比較結果を簡単にまとめておきます。\nN+1有り N+1無し 速度 3.54 ms 1.64 ms クエリ数 11 2 確かにN+1が無しの方が時間もクエリ数も少ないことがわかるかと思います。\nただ、前述したように一般的にはこのNの数が増えれば増えるほどパフォーマンスへの影響は顕著に現れると言われていて、今回のようなN=10だとあまり大差ないように感じてしまいますね。\n筆者はまだ半信半疑だったので、もうちょっと深掘りして件数を増やしてみました。\nその場合の結果は以下のとおりです。\nN=? (人) N+1有り(s) N+1無し(s) N+1有り / N+1無し 1000 1.36 0.019 71.57 10000 116.60 0.128 910.93 20000 446.84 0.244 1831.31 30000 1003.20 0.365 2748.49 40000 1798.77 0.496 3626.55 50000 2830.94 0.631 4486.43 テストデータは簡単なテーブルにFakerで適当な値を入れたものでしたが、件数が大きくなればなるほどN+1有りの時間が増えていることがわかるかと思います。\n実際、50000件の時はN+1有りだと47分近くかかっていて、無しの時と比べ4486倍近くかかってしまいます。\n本心ではもうちょっと件数増やしてみたい気持ちもありましたが、ギブアップしましたw\n※ N\u0026gt;500からは、デバッグツールの表示処理の際メモリエラーになってしまったため、コントローラーにて、測定したい処理を挟んでmicrotimeで差分を取って秒数を算出しています。\n$firstStartTime = microtime(true); // ここに測定したい処理 $firstEndTime = microtime(true); $firstQueryTimeDiff = $firstEndTime - $firstStartTime; まとめ 今回、N+1問題についてSymfonyとMySQLの環境で簡単に試してみました！\n前々からN+1問題について聞いたことはあり、速度への影響があることも知っていました。\nただ、やはり実際に試してみると身をもってどれくらい時間がかかるのか？などが鮮明になり、大切であることを確認できたと思います。\nこういった検証は好きなので、今後も良い題材があれば色々試してみようと思います！\n","date":"2023-09-15","permalink":"/blog/symfony-n1/","section":"","summary":"はじめに こんにちは！\nオズビジョン開発ユニット（ハピタス）の木山です。\n今回はWebの開発をする上でよく耳にするN+1問題についてSymfonyとMySQLの環境で検証をしてみようと思います！\nN+1問題とは？ まずはじめにN+1問題について簡単におさらいしておきます。\n前提として、データベースにUsersテーブルとCommentsテーブルが存在している簡単なSNSアプリケーションを考えてみます。\nここで、全ユーザーの全コメントを表示する機能を実装したいです。\nその際、UsersテーブルからUserの一覧を取得し、各ユーザーのIDを用いてCommentsテーブルのユーザーに紐づくデータも取得します。\nこの際、発行されるクエリに着目をすると、\n// UsersテーブルからUserのid一覧を取得 select id from Users; // Commentsテーブルから特定UserのCommentを取得 （これをUserの人数分繰り返す） select * from Comments where user_id = ?; 上記のようなクエリになります。\n例えばユーザーが10人いると、以下のようなイメージです。","title":"SymfonyによるN+1の速度比較をやってみた！"},{"content":"","date":"2023-09-15","permalink":"/authors/t-kiyama/","section":"Authors","summary":"","title":"t-kiyama"},{"content":"こんにちは！オズビジョン開発ユニット（ハピタス）の天野です。\n今回は、開発ユニットの週末イベント「ビアバッシュ」について紹介します。\nビアバッシュの概要 毎週金曜日、終業前の30分を利用して、特別なイベント「ビアバッシュ」を開催しています。このイベントは、その週に感謝したい人々への「ありがとう」を送り、お互いを讃え合うことを目的としています。弊社は火曜日と金曜日に出社日を設けているため、金曜日にはオフィスにいるメンバーがリアルでお酒を楽しむこともあります。\n（トップの画像はオンライン開催時にみんなで乾杯した時の写真です。）\nビアバッシュ中にメンバーは専用のSlackチャンネル「thanksありがとう」を通じて感謝のメッセージを共有しています。\n感謝のメッセージ例 専用のSlackチャンネルで実際に送られるメッセージを紹介します。\nこのように、メッセージを送ると大量のスタンプが付くことがあります笑\n僕もいつも大量にスタンプを送りつけています。\n仕事終わりでみんなテンションが高いです。\nビアバッシュを通じて得られたもの ①日頃の感謝を改めて言葉にできる 通常の業務の中で、お世話になっているメンバーは多いことでしょう。しかし、直接感謝の気持ちを伝えるのは、時には照れくさいことや適切なタイミングを見計らう難しさがあります。そこで、「感謝を伝える場」を設けることで、日頃の感謝の気持ちを改めて言葉にする機会が得られます。\n②他部署メンバーとのコミュニケーションの場にもなる ビアバッシュはもともとエンジニア内で始まりましたが、プロジェクトで関わった他部署メンバーへのメッセージが増えていきました。徐々にエンジニア以外のメンバーも参加するようになり、ちょっとした交流の場になっています。\n③感謝されることの喜び やはり、誰かに感謝されるととても嬉しいです。他のメンバーからの感謝の言葉は、自身の仕事への取り組みと貢献が認められていることを示しています。また、何気ない自分の行動が誰かにとっては大きな助けになっていることに気づくことができます。この結果、モチベーションの向上につながり、メンバー全体の働きやすさを高めています。\n終わりに 弊社オズビジョンのビアバッシュは、感謝と交流を重視した特別なイベントです。週の疲れを癒し、新たなエネルギーをチームに注入する場として、価値を提供しています。あなたのチームでも、ビアバッシュを通じて感謝の輪を広げ、一体感を育んでみてはいかがでしょうか。\n最後まで読んでいただきありがとうございました。\n","date":"2023-09-08","permalink":"/blog/beerbash/","section":"","summary":"こんにちは！オズビジョン開発ユニット（ハピタス）の天野です。\n今回は、開発ユニットの週末イベント「ビアバッシュ」について紹介します。\nビアバッシュの概要 毎週金曜日、終業前の30分を利用して、特別なイベント「ビアバッシュ」を開催しています。このイベントは、その週に感謝したい人々への「ありがとう」を送り、お互いを讃え合うことを目的としています。弊社は火曜日と金曜日に出社日を設けているため、金曜日にはオフィスにいるメンバーがリアルでお酒を楽しむこともあります。\n（トップの画像はオンライン開催時にみんなで乾杯した時の写真です。）\nビアバッシュ中にメンバーは専用のSlackチャンネル「thanksありがとう」を通じて感謝のメッセージを共有しています。\n感謝のメッセージ例 専用のSlackチャンネルで実際に送られるメッセージを紹介します。\nこのように、メッセージを送ると大量のスタンプが付くことがあります笑\n僕もいつも大量にスタンプを送りつけています。\n仕事終わりでみんなテンションが高いです。\nビアバッシュを通じて得られたもの ①日頃の感謝を改めて言葉にできる 通常の業務の中で、お世話になっているメンバーは多いことでしょう。しかし、直接感謝の気持ちを伝えるのは、時には照れくさいことや適切なタイミングを見計らう難しさがあります。そこで、「感謝を伝える場」を設けることで、日頃の感謝の気持ちを改めて言葉にする機会が得られます。\n②他部署メンバーとのコミュニケーションの場にもなる ビアバッシュはもともとエンジニア内で始まりましたが、プロジェクトで関わった他部署メンバーへのメッセージが増えていきました。徐々にエンジニア以外のメンバーも参加するようになり、ちょっとした交流の場になっています。\n③感謝されることの喜び やはり、誰かに感謝されるととても嬉しいです。他のメンバーからの感謝の言葉は、自身の仕事への取り組みと貢献が認められていることを示しています。また、何気ない自分の行動が誰かにとっては大きな助けになっていることに気づくことができます。この結果、モチベーションの向上につながり、メンバー全体の働きやすさを高めています。\n終わりに 弊社オズビジョンのビアバッシュは、感謝と交流を重視した特別なイベントです。週の疲れを癒し、新たなエネルギーをチームに注入する場として、価値を提供しています。あなたのチームでも、ビアバッシュを通じて感謝の輪を広げ、一体感を育んでみてはいかがでしょうか。\n最後まで読んでいただきありがとうございました。","title":"金曜日はビアバッシュで乾杯して帰ろう🍻"},{"content":"","date":"2023-09-08","permalink":"/tags/%E4%BA%A4%E6%B5%81/","section":"Tags","summary":"","title":"交流"},{"content":"","date":"2023-07-24","permalink":"/tags/%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/","section":"Tags","summary":"","title":"レビュー"},{"content":"こんにちは！オズビジョン開発ユニット(ハピタス)の天野です。\nこの記事では、私たちが実践している「チーム全体でレビュー指摘（フィードバック）を共有する取り組み」について紹介します。\n要約 プロジェクトごとに別チームで開発する開発ユニット(ハピタス)は、有益な知識とフィードバックを共有する必要性を感じ、週1回のミーティングでレビュー指摘をまとめたリストを振り返る時間を作りました。具体的な指摘を共有し、100件の知識抽出と改善を実現。レビュアーとレビュイーからの声も好評。これからも価値ある情報を共有する「お焚き上げ」プロセスを通じて、チームの改善を進めていく予定です。\n背景 開発ユニット(ハピタス)は、プロジェクトごとに別々のチームで開発しています。これまではコードレビューが品質保証の一環として行われてきましたが、有益な知識やフィードバックが他のチームメンバーと共有されるべきだという考えから、過去のレビュー指摘を振り返り、他チームへのフィードバックも垣根を越えて横展開するための場を設けました。\n取り組み内容 週に1度、全体ミーティングで、レビュー指摘のフィードバックがまとめられたスプレッドシートを共有しています。\nこのスプレッドシートは日々更新され、必要に応じて新しいフィードバックが追加されます。\nミーティングでは、以下の情報を確認します。\n差し戻し理由 改善または継続の状態 差し戻しの詳細内容 差し戻し理由の詳細 提案事項 具体的な指摘のURL 確認日 この場で、指摘したメンバーからの解説と他メンバーからの質問が行われます。解説の中で具体的な指摘の例を示し、チームの理解度・浸透度が低い指摘については引き続き振り返るようにしています。通常、1回のミーティングで4~6件の指摘を取り上げます。\nさらに、チェックリストが増え続けるため、定期的に内容を整理し、組織内で共有済みと認識されるフィードバックや学びを「お焚き上げ」としてマークし、今後確認する必要がないものとして取り扱っています。\n実績 この取り組みを半年間続けた結果、約100件の知識抽出と横展開が実現しました。\nレビュアーからの声 「指摘を受けた人以外も意識してコードを書く場面が増えてきた」 「以前の指摘をレビュアーも振り返れるようになった」 「同じ指摘が減ってきた」 レビュイーからの声 「XSSエスケープへの意識が高まり、セキュリティ指摘が減少」 「新メンバーも以前の知見を追えるようになった」 感想 知識を蓄積する行為は容易ですが、それをチーム全体に共有することに大きな重要性があると考えます。特に、組織全体で共有される価値があると認識された情報を整理する「お焚き上げ」のプロセスは、大きな価値を持つ行動と言えるでしょう。\n今後も私たちは、このプロセスを通じて得た指摘や学びを全体で共有し、持続的な改善を進めていく予定です。\n","date":"2023-07-24","permalink":"/blog/make-the-review-points-permeate/","section":"","summary":"こんにちは！オズビジョン開発ユニット(ハピタス)の天野です。\nこの記事では、私たちが実践している「チーム全体でレビュー指摘（フィードバック）を共有する取り組み」について紹介します。\n要約 プロジェクトごとに別チームで開発する開発ユニット(ハピタス)は、有益な知識とフィードバックを共有する必要性を感じ、週1回のミーティングでレビュー指摘をまとめたリストを振り返る時間を作りました。具体的な指摘を共有し、100件の知識抽出と改善を実現。レビュアーとレビュイーからの声も好評。これからも価値ある情報を共有する「お焚き上げ」プロセスを通じて、チームの改善を進めていく予定です。\n背景 開発ユニット(ハピタス)は、プロジェクトごとに別々のチームで開発しています。これまではコードレビューが品質保証の一環として行われてきましたが、有益な知識やフィードバックが他のチームメンバーと共有されるべきだという考えから、過去のレビュー指摘を振り返り、他チームへのフィードバックも垣根を越えて横展開するための場を設けました。\n取り組み内容 週に1度、全体ミーティングで、レビュー指摘のフィードバックがまとめられたスプレッドシートを共有しています。\nこのスプレッドシートは日々更新され、必要に応じて新しいフィードバックが追加されます。\nミーティングでは、以下の情報を確認します。\n差し戻し理由 改善または継続の状態 差し戻しの詳細内容 差し戻し理由の詳細 提案事項 具体的な指摘のURL 確認日 この場で、指摘したメンバーからの解説と他メンバーからの質問が行われます。解説の中で具体的な指摘の例を示し、チームの理解度・浸透度が低い指摘については引き続き振り返るようにしています。通常、1回のミーティングで4~6件の指摘を取り上げます。\nさらに、チェックリストが増え続けるため、定期的に内容を整理し、組織内で共有済みと認識されるフィードバックや学びを「お焚き上げ」としてマークし、今後確認する必要がないものとして取り扱っています。\n実績 この取り組みを半年間続けた結果、約100件の知識抽出と横展開が実現しました。\nレビュアーからの声 「指摘を受けた人以外も意識してコードを書く場面が増えてきた」 「以前の指摘をレビュアーも振り返れるようになった」 「同じ指摘が減ってきた」 レビュイーからの声 「XSSエスケープへの意識が高まり、セキュリティ指摘が減少」 「新メンバーも以前の知見を追えるようになった」 感想 知識を蓄積する行為は容易ですが、それをチーム全体に共有することに大きな重要性があると考えます。特に、組織全体で共有される価値があると認識された情報を整理する「お焚き上げ」のプロセスは、大きな価値を持つ行動と言えるでしょう。","title":"レビュー指摘をチーム全体に浸透させる取り組み"},{"content":"","date":"2023-07-17","permalink":"/tags/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E7%9F%A5%E8%AD%98/","section":"Tags","summary":"","title":"ドメイン知識"},{"content":"こんにちは！オズビジョン開発ユニットの天野です。\n今回は、ハピタス開発チームが行っている品質改善の取り組みをご紹介します。\n要約 弊社のサービス ハピタス は、常に新しい機能をリリースしています。\nこれらの新機能は、既存の仕様に影響を与える場合もあります。\nそのため、私たちは設計段階で「案件説明会」という名のMTGを開催し、ハピタス開発チーム全体でレビューを徹底して行っています。\nこのアプローチにより、サービスの品質を向上させると同時に、不十分な設計や考慮漏れによる事故を未然に防ぐことを目指しています。\nまた、自分の担当範囲外の機能開発についてもキャッチアップすることで、より広い視野での成長を目指しています。\nなぜ始めたのか 以前は、その機能の開発を担当するメンバーが独自で設計を行っていましたが、他で並行して進めている開発と修正が重複したり、既存仕様に意図しない影響を及ぼしてしまうことがありました。そこで、設計段階で詳しいメンバーによるレビューと進行中の他の機能開発との影響確認のためのMTGを開始しました。\n最初は詳しいメンバーと担当者のみの参加でしたが、より広範囲での情報共有を図るために現在はハピタス開発チーム全員の参加を基本としています。\n具体的な取り組み 会議体 週に1度、ハピタス開発チーム全員が参加するMTGを設定しています。\n新機能の要件が一定程度決まり、開発側が要件定義を進めるタイミングで案件説明会を行います。\n進め方 要件定義のフォーマットに従い、担当者が事前に作成した要件定義書をもとに画面共有しながら全体に共有していきます。\n機能によってはスプレッドシートやFigmaを使って共有することもあります。\n要件定義フォーマットの一部\n# 案件概要 - 開発する機能の説明 - 目的 - 企画の主担当 - 画面イメージ # 仕様定義 ## 機能要件 - 開発スコープ - 改修箇所 - データベースへの影響があるか - バッチ処理が必要か - 管理画面の開発を行うか ## 非機能要件 - マイルストーン - データ集計・効果測定の仕組み - 監視 - 性能 - セキュリティ 共有が終わった後は、メンバーからのフィードバックや質問の時間を設けています。フィードバックでは、仕様に関するものやセキュリティ対策、テーブル設計など様々な観点からアドバイスをいただきます。\n「このテーブルは件数が多くて処理が重くなりがちなので、このバッチは本番相当のデータで性能テストをしたほうがいいよ」、「その機能を作りたいなら既存のあのAPIが使えるよ」、「ユーザ目線だと、この注意文言を表示してあげた方が良いかも」といったように、それぞれが機能の改善点を提案し、ハピタス開発チーム全体でよりよいサービスへと導くための意見交換が行われています。\nレビュー後の流れ 案件説明会でもらったフィードバックをもとに設計の見直しや、開発側から提案できそうな改善点や不明点などを整理し、必要に応じて再度レビューの時間を設けています。その後、実装に着手していきます。\nまとめ 品質改善に向けた取り組みである「案件説明会」は、多くのメリットをもたらしています。設計のタイミングでのレビューにより、手戻りが少なくなり、効率的な開発を実現しています。また、自分が担当していない開発の概要や設計に触れることで、ドメイン知識の浅い新メンバーや若手の成長の機会となっています。\nしかしながら、遠慮して積極的に発言しない人やタスクが忙しくて参加が難しいメンバーに対する配慮も必要です。改善点として、初心者でも理解しやすいアジェンダの作成や、参加者全員に意義のある会議になるような工夫を行っています。\n案件説明会は、メンバー全員が協力し合いながら品質改善に取り組む大切な場です。今後もハピタス開発チーム全体の協力を大切にし、より良いサービスを提供するために改善し続けていきます。\n","date":"2023-07-17","permalink":"/blog/specification-reviews-in-ozvision/","section":"","summary":"こんにちは！オズビジョン開発ユニットの天野です。\n今回は、ハピタス開発チームが行っている品質改善の取り組みをご紹介します。\n要約 弊社のサービス ハピタス は、常に新しい機能をリリースしています。\nこれらの新機能は、既存の仕様に影響を与える場合もあります。\nそのため、私たちは設計段階で「案件説明会」という名のMTGを開催し、ハピタス開発チーム全体でレビューを徹底して行っています。\nこのアプローチにより、サービスの品質を向上させると同時に、不十分な設計や考慮漏れによる事故を未然に防ぐことを目指しています。\nまた、自分の担当範囲外の機能開発についてもキャッチアップすることで、より広い視野での成長を目指しています。\nなぜ始めたのか 以前は、その機能の開発を担当するメンバーが独自で設計を行っていましたが、他で並行して進めている開発と修正が重複したり、既存仕様に意図しない影響を及ぼしてしまうことがありました。そこで、設計段階で詳しいメンバーによるレビューと進行中の他の機能開発との影響確認のためのMTGを開始しました。\n最初は詳しいメンバーと担当者のみの参加でしたが、より広範囲での情報共有を図るために現在はハピタス開発チーム全員の参加を基本としています。\n具体的な取り組み 会議体 週に1度、ハピタス開発チーム全員が参加するMTGを設定しています。\n新機能の要件が一定程度決まり、開発側が要件定義を進めるタイミングで案件説明会を行います。\n進め方 要件定義のフォーマットに従い、担当者が事前に作成した要件定義書をもとに画面共有しながら全体に共有していきます。\n機能によってはスプレッドシートやFigmaを使って共有することもあります。\n要件定義フォーマットの一部\n# 案件概要 - 開発する機能の説明 - 目的 - 企画の主担当 - 画面イメージ # 仕様定義 ## 機能要件 - 開発スコープ - 改修箇所 - データベースへの影響があるか - バッチ処理が必要か - 管理画面の開発を行うか ## 非機能要件 - マイルストーン - データ集計・効果測定の仕組み - 監視 - 性能 - セキュリティ 共有が終わった後は、メンバーからのフィードバックや質問の時間を設けています。フィードバックでは、仕様に関するものやセキュリティ対策、テーブル設計など様々な観点からアドバイスをいただきます。","title":"ハピタス開発チームの品質向上に向けたアプローチ"},{"content":"","date":"2023-07-12","permalink":"/tags/aws-new-grads/","section":"Tags","summary":"","title":"AWS New Grads"},{"content":"こんにちは！\nオズビジョン開発ユニットの木山です。\n先月初めてAWS New Gradsという初学者向けの研修に参加しました。\nそれはとても素晴らしい経験だったので、今日はこのブログでその経験をシェアしたいと思います。\nAWS New Gradsとは？ まず始めに、「AWS New Gradsって何？」と思っている方もいるかもしれませんね。\nAWS New Gradsは、基本的に新卒1年目の方を対象にしたAWS公式の研修プログラムです。\n私が参加したのは \u0026ldquo;AWS JumpStart 2023 for NewGrads 設計編\u0026quot;というセッションでした。\n公式の情報によると、\n\u0026ldquo;クラウドの入り口となるパートナー限定セミナーです。新入社員に特化したトレーニング「AWS New Grads Training」そして、新入社員以外の皆様向けトレーニング「はじめてのクラウド」を開催しています。「クラウドとは？」といった内容からAWSの学び方までお伝えします。IT初心者にも伝わる構成となっており、AWSを学ぶ最初の一歩として広くご利用いただけるセミナーです。\u0026rdquo;\nAWS 初学者向け AWS パートナーのラーニングパスご紹介\nつまり、これはAWSの入り口を学ぶためのセミナーなんです。\n(ちなみに、私は新卒ではなく、社会人歴は既に4年目ですが、それでも参加は可能でした!)\nさらに詳しく言うと、この研修では、「こんなサービスを作りたい！」と思い立った後、AWSでどのような構成が最適なのかを理解できるようになります。\n具体的には、予想されるアクセス数、予算、可用性など、さまざまな要素を考慮した上での最適な構成を考えることができます。\nしかし、AWSに詳しくない方や、インフラを他のチームが担当していて詳しくない方は多いと思います。\nまた、一年間の無料枠はあるものの、サービスの量が多すぎてどこから手をつけていいかわからない、または予期せぬ課金が怖いと感じてなかなか手を出せない方も多いと思います。\nそんな方々にとって、この研修は大変おすすめです！\nそれでは、以下では研修の内容について時系列で詳しく書いていきたいと思います。\nAWS New Gradsでの体験 私が参加した回は、\u0026ldquo;第一回：2023年5/31 (水) - 6/2 (金)\u0026ldquo;で、3日間開催されました。\n業務時間に研修に参加させていただいたので、ここでは日ごとに研修の内容を詳しく紹介していきます。\n1日目 1日目は、午前中にアーキテクチャ設計のコツを学び、午後はスケーラブルなサービス構築についてのハンズオンがありました。\nアーキテクチャ設計のコツ アーキテクチャ設計のコツでは、Webアプリケーションの基礎から学びました。\nサーバーとクライアントの通信の仕組みを理解することで、AmazonのWebページでどのような通信が行われているのかを具体的に学びました。\nその後、アーキテクチャ設計について学びました。\nフェーズごと、目的ごとに目指すべき形が変わること、そしてそれぞれのフェーズが大きくなるにつれて考えなければならないことを学び、アーキテクチャ図を作成しました。\n具体的には、最初はプロトタイプを想定したWebサーバーとDBだけの図から始め、DNSやロードバランサなど、一般的なサービスに必要となる要素を追加し、さらに各要素を同じ役割のAWSサービスに置き換えていきました。\nこのセッションを通して、アーキテクチャとは規模によって最適解があり、大きくなればなるほど考慮すべき点が増えるということ、そしてAWSサービスそれぞれの役割について理解することができました。\nスケーラブルなサービス構築のハンズオン スケーラブルなサービス、とは要は、必要に応じてサクッとリソースを調整できるタイプのサービスのことですね。\nそんなサービスを、実際に手を動かしてAWS上に構築してみる、というのがこのハンズオンの趣旨です。\n具体的には、ToDo管理アプリのアプリケーションコードが提供されていて、このコードをFargateで運用し、データはAuroraDBで保持するアプリを実装しました。\n始める前に、まずはpdfを使ったAWS Console上での操作説明をしてもらいます。\nそれからは、自分たちでpdfを参照しながら、一心不乱に作業を進めていく形です。\n完成したら、以下のような構成図が出来上がるはずです。\nもし、作業を進めていて何かわからないことがあったら、AWS Solution Architectの方々（以下、SAと略す）に気軽に相談ができます。\n2日目 2日目の午前中はEC2体験ハンズオン、そして午後がチームでアーキテクチャ検討アクティビティとなっていました。\nそれぞれの時間で何をやったか、詳しく書いていきましょう。\nEC2体験ハンズオン EC2体験ハンズオンでは、EC2で手軽なサーバーを立てて、その動作確認を進めていきました。\n具体的には、まずはEC2インスタンスを立てて、その上でhttpdをインストールし、EC2で動かします。\nそして、httpdのデフォルト画面がURLでアクセス可能であることを確認しました。\n以下のような構成で行いましたが、最後には、この構成だとEC2に問題が発生した場合には問題が生じるため、それに対する対策が必要であることを確認して、午前中のハンズオンはそこで一旦終了となりました。\nアーキテクチャ検討アクティビティ 午後からはクリエイティブな時間が始まりました。\nテーマが与えられ、チームでそのテーマに合ったアーキテクチャを考えるアクティビティです。\nAWSの研修だけあって、さまざまな会社から新卒を中心とした若手エンジニアが集まっています。\n参加者からランダムに5人ずつグループを作り、アーキテクチャについて思い切り語り合います。\n社外のエンジニアとこんなに緊密に協働する機会ってあまりないので、新鮮な体験でした！\nお題については詳細に語ることはできませんが、ざっくりしたイメージを伝えると、\n「ある程度のユーザー数を見込んだ、こんなWEBサービスを作って欲しい！」\nといった感じでお題が出されます。\nそれに対して、まずは動作する最低限のサービスの組み合わせは？\nさらに、可用性も考えたときにどういった構成が良いのか？\nそして、コスト面も考えるとキャッシュの活用や、画像などの静的データの取り扱いはどうすべきか？\nなどを、チームで議論しつつ、AWSのサービスアーキテクチャ図を作成します。\n最初の講義やハンズオンで学んだものをベースにしながら、「これを使えば低コストになるかも」\n「自分たちの会社では、こんなサービスをログ出力に利用しているんだよね」\nなど、現場で実装をするときの視点でディスカッションを重ね、最終的に一つの図に落とし込んでいきました。\nそしてその成果物がこちらです。\n（ちなみに、DynamoDBはVPCの外にあるべきなど、まだ見直すべき点はいくつかありますね汗）\n3日目 3日目が最後の日となり、午前中はサーバーレスハンズオン、そして午後は再びアーキテクチャ検討アクティビティで盛り上がりました！\nこれまで通り、午前と午後のセッションでやったことを記録していきます！\nサーバーレスハンズオン 始めに行ったのはサーバーレスハンズオンです。\nAWSのサーバーレスなサービスを使って、何か手軽に作ってみよう！\nというテーマで、具体的にはAWS LambdaとAPI Gatewayを用いて、URLに含まれるクエリ文字列の日本語を英語に翻訳するAPIを作りました。\nそして、翻訳がうまくいったことを確認したら、その翻訳履歴をサーバーレスサービスのDynamoDBに保存し、それが確認できるようにするという流れでハンズオンを進めました。\nアーキテクチャ検討アクティビティ そして最後のセッションとなるのが、再度のアーキテクチャ検討アクティビティです！\n前回作成したアーキテクチャに大きな影響を与える新たな要件が出てきました。\n今日学んだサーバーレスな要素も踏まえて、新たな要件が追加された場合、どのような構成がベストなのか？再度、図を作って考えていきました。\n（またもや、お題は内緒です！それは参加したらのお楽しみですよ！）\n3日目になると、チームメンバーとも打ち解け、雑談混じりに楽しく話し合いができました！\n中には早速ChatGPTを本格的に利用している人もいて、困ったときは調べてもらったりしてました（笑）\nそんな中で最終的に出来上がった図はこちらです。\n2日目の内容から改良を重ね、結構しっかりできたんじゃないかな？と自負しています！\n研修はこの図の作成で締めくくり、時間の都合上、いくつかのグループに対してSAの方からフィードバックをもらう時間を設け、研修全体が終了となりました。\n多数のチームが図を作る中、各チームがどのような意図を持って図を作ったのかを見るのも、新たな発見がありました。\nちなみに、自分達のチームはフィードバックをもらうチームには選ばれませんでしたが、他チームがもらっていたフィードバックの一部はこんな感じでした。\n分析 - RDS-\u0026gt;S3のデータコピーを行うLambdaは定期実行ですか？全てのデータを取得するか、差分取得か。それはどのように実装するのか。15分制限は超えないか。 - Lambdaが参照しているRDS、これはなにか？上のAuroraとは別クラスタ？ - RedshiftやAthena色々選択肢があって悩ましいですよね。今回Athenaを選定した理由はなんですか？ - S3にはどのようなフォーマットで配置するのか - 余談ですが、今回のサイトってどういうBIダッシュボード作りそうでしょうか。事業KPIは何ですか。それを計算するためのデータはRDSに格納されそうですか CICD - 今回GitHub Actionsを採用した理由はなんですか？Code Pipelineなども選択肢にはあったはず。 - GitHub ActionsからECSへのデプロイは具体的にどのように行いますか？ロールバックなども対応しているもの？Blue/Greenデプロイ、ローリングアップデートといったデプロイ戦略も知りたいです。 - CIとかも実装するんですかね(皆さんの会社はCICDなども実装されていますか？) 等 これらのフィードバックは私たちのチームにも当てはまる部分が多く、新たな視点を得られてとても有益でした。\nAWS New Gradsの体験感想 いかがでしょうか？驚きの多い3日間でしたよね？\n私がこの研修を受けるまで、AWSの一部のサービスは知っていましたが、全体のビジョンはまだ見えていませんでした。\nたとえば、S3はオブジェクトキーを持ち、あらゆるファイルを保存できるストレージ、っていう基本的な知識はありました。\nけれど、リクエストが発生してからサーバーが応答を返すまでの流れ、どのサービスがどのように連携し、最終的にS3がどのように動くのかという全体像は把握していませんでした。\nこの研修を通じて、リクエストの始まりからサーバーからの応答まで、AWSでどのようなルートを辿り、どのようなサービスが連携し、最終的にどのような形になるのかという全体像を理解できました。\nさらに、研修が終わった直後に私たちの会社のAWS構成図を見てみたら、その構成と意図が理解でき、それが大きな驚きでした！\nまた、講義とは別の話ですが、いろいろな会社から参加していたエンジニアたちとの交流も本当に楽しかったです。\n私は人見知りなので、普段は聞くだけ、見るだけ、読むだけの勉強会に参加することが多いのですが、この研修の経験は今後、コミュニケーションが必要な勉強会やハンズオンにも積極的に参加してみたいと思わせる良いきっかけとなりました。\n少なくとも私は、この研修で一生の宝物となる知識を得ることができたと思っています！\nもしAWSを使用していて、このような研修に参加する機会があれば、ぜひ体験してみてください！\n開催は年に数回と思われるので、機会に出会うこと自体が難しいかもしれませんが、絶対に後悔しないと思いますよ。そのことだけは伝えておきたいと思います。\n長くなりましたが、最後まで読んでいただき、ありがとうございました！\n","date":"2023-07-12","permalink":"/blog/aws-new-grads/","section":"","summary":"こんにちは！\nオズビジョン開発ユニットの木山です。\n先月初めてAWS New Gradsという初学者向けの研修に参加しました。\nそれはとても素晴らしい経験だったので、今日はこのブログでその経験をシェアしたいと思います。\nAWS New Gradsとは？ まず始めに、「AWS New Gradsって何？」と思っている方もいるかもしれませんね。\nAWS New Gradsは、基本的に新卒1年目の方を対象にしたAWS公式の研修プログラムです。\n私が参加したのは \u0026ldquo;AWS JumpStart 2023 for NewGrads 設計編\u0026quot;というセッションでした。\n公式の情報によると、\n\u0026ldquo;クラウドの入り口となるパートナー限定セミナーです。新入社員に特化したトレーニング「AWS New Grads Training」そして、新入社員以外の皆様向けトレーニング「はじめてのクラウド」を開催しています。「クラウドとは？」といった内容からAWSの学び方までお伝えします。IT初心者にも伝わる構成となっており、AWSを学ぶ最初の一歩として広くご利用いただけるセミナーです。\u0026rdquo;\nAWS 初学者向け AWS パートナーのラーニングパスご紹介","title":"AWS New Gradsの体験共有と所感について"},{"content":"","date":"2023-07-12","permalink":"/tags/%E6%96%B0%E5%8D%92/","section":"Tags","summary":"","title":"新卒"},{"content":"","date":"2023-07-01","permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI"},{"content":"こんにちは！オズビジョン開発ユニットの天野です。\n昨今話題になっているAIによるコーディング支援ツール「GitHub Copilot」と「Amazon CodeWhisperer」について、実際に動かしながら比較を行い、実務においても利用価値があるのか調査していきます。\n概要 GitHub Copilotとは？ GitHub Copilotは、OpenAIが開発した人工知能モデル「OpenAI Codex」を使用し、コードや機能をサジェストしてくれる \u0026ldquo;あなたのAIペアプログラマー\u0026rdquo; です。(2022年6月21日一般リリース)\nYour AI pair programmer GitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor.\n引用: https://github.com/features/copilot\nAmazon CodeWhispererとは？ Amazon CodeWhispererは、何十億行ものAmazonのコードや公開されているコードでトレーニングされており、自然言語（英語）で記述されたコメントを理解し、複数のコードの提案をリアルタイムで生成して、開発者の生産性を向上させることができます。(2023年4月13日正式リリース)\n引用元: https://aws.amazon.com/jp/codewhisperer/features/\n導入事例 2023/07/01 時点\nGitHub Copilot🚀 導入事例複数\nOLTA ChatGPTとGitHub Copilotを全社導入した話 https://techblog.olta.co.jp/entry/2023/04/14/192601 STORES GitHub Copilot for Business 始めました https://product.st.inc/entry/2023/03/31/171318 Gaudiy GitHub Copilot 導入して1ヶ月経ったので振り返ってみた https://techblog.gaudiy.com/entry/2023/04/20/162647 Amazon CodeWhisperer🤫 特に該当記事見当たらず\n一般公開されてから1年以上経つGitHub Copilotは複数の導入事例があるのに対して、公開されて間もないAmazon CodeWhispererは、実務で導入している旨の記事は見当たりませんでした。\n料金 月額(個人プラン) 月額(企業プラン) GitHub Copilot $10 $19(1ユーザにつき) Amazon CodeWhisperer 無料 $19(1ユーザにつき) ※ 執筆時点の情報です。更新される可能性もあるため、ご利用の際は下記情報もあわせてご参照ください。\nGithub Copilot\nAmazon CodeWhisperer\n対応IDE Visual Studio Code Neovim AWS Cloud9 JetBrains GitHub Copilot ○ ○ ○ Amazon CodeWhisperer ○ ○ ○ セキュリティの考慮 GitHub Copilot🚀\n企業プラン(for Business)ではプロンプト、サジェスチョンともにリアルタイムにのみ送信され、保持されません。テレメトリー(Copilot自体の改善への情報提供 = 学習に使われるデータ)をOFFにできます。\nまたGitHubのパブリックコードと一致するコード候補を検出するフィルターが含まれているため、フィルターを有効または無効の選択ができます。\n参考\nPrivacy – Copilot for Business-What data does Copilot for Business collect? GitHubのパブリックコードと一致するコード候補を検出するフィルターが含まれている。フィルターを有効または無効の選択ができる。 Amazon CodeWhisperer🤫\nコードスキャン機能を使用してPython、Java、およびJavaScriptコードをスキャンし、Open Web Application Security Project (OWASP) のトップ 10 に含まれる見つけにくい脆弱性や、暗号ライブラリのベストプラクティスを満たさない脆弱性などを検出できます。CodeWhispererは、セキュリティの脆弱性を特定すると、それらの修正方法に関する提案も提供します。\n参考\nAmazon CodeWhisperer のよくある質問\n実際に使ってみた JS/TS コメントに書いた処理を関数として表示 GitHub Copilot🚀\nAmazon CodeWhisperer🤫\nこちらも提案してくれるコードはほとんど同じですが、GitHub Copilotはreturnまでの候補を一度に提案してくれました。\nテストコードの作成 Jestのテストコードを記述するため、あらかじめテストケースをコメントで残して確認しました。\nconst matchTest = (str: string): boolean =\u0026gt; { const r = new RegExp( /^((https?:)?\\/\\/([\\.\\w\\-]+\\.)?hapitas\\.jp)?(\\/|\\/[^\\/].*)?$/ ); return r.test(str); }; // matchTest関数をテストするサンプル describe(\u0026#34;matchTest\u0026#34;, () =\u0026gt; { // trueが返されることを確認する // falseが返されることを確認する // パスのみのURLでtrueを返すことを確認する // httpスキームから始まるドメインでfalseが返されることを確認する // http以外のスキームから始まるドメインでfalseが返されることを確認する }); GitHub Copilot🚀\nAmazon CodeWhisperer🤫\n両ツールともに差異なくコメントに沿ったテスト用コードを提案してくれました。\n文字列の加工・抽出 文字列をカンマ区切りに変換 GitHub Copilot🚀 、Amazon CodeWhisperer🤫 どちらも変わらず\nスネークケースへの変換 GitHub Copilot🚀 、Amazon CodeWhisperer🤫 どちらも変わらず\n両ツールともに差異なくコメントに沿った整形後のコードを提案してくれました。\nReact プロパティ名から型の予測 GitHub Copilot🚀 、Amazon CodeWhisperer🤫 どちらも変わらず\nstateの予測 GitHub Copilot🚀 、Amazon CodeWhisperer🤫 どちらも変わらず\n両ツールともに差異なく期待するコードを提案してくれました。\nAPIからデータを取得するhookの作成 GitHub Copilot🚀\nAmazon CodeWhisperer🤫\n提案してくれるコードはほとんど同じですが、GitHub Copilotの方が候補の表示スピードが若干速く感じました。\nPython S3 バケットにtxtファイルをputする処理 GitHub Copilot🚀\nAmazon CodeWhisperer🤫\nどちらも非推奨のリソース boto3 をimportしていますが、コメントに沿った処理を提案してくれました。\nAmazon CodeWhispererは statusCode 、body のreturnまで一度に提案してくれました。\nThe AWS Python SDK team does not intend to add new features to the resources interface in boto3. Existing interfaces will continue to operate during boto3’s lifecycle. Customers can find access to newer service features through the client interface.\n引用: boto3.amazonaws.com\nAWS Python SDKチームは、boto3のリソースインターフェースに新しい機能を追加するつもりはありません。既存のインターフェースはboto3のライフサイクルの間、引き続き動作します。顧客はクライアントインタフェースを通じて新しいサービス機能へのアクセスを見つけることができます。 (DeepL翻訳)\n予測の候補一覧を表示する GitHub Copilot🚀\nAmazon CodeWhisperer🤫\nGitHub Copilotの方が候補一覧の表示がスムーズで、カーソルの上下で候補を切り替えることもできます。\nまとめ 両ツールともに非常に優れたコーディング支援ツールであり、開発者の生産性を向上させることができるため、利用価値は十分にあります。GitHub Copilotは、導入事例も多く、豊富なサンプルコードや実績があります。一方、Amazon CodeWhispererはまだ公開されたばかりで導入事例が見当たりませんが、AWSのリソースに強い補完が効く可能性があります。\n選択するツールは、個々のニーズや環境によって異なるかもしれません。実際に試してみて、自分に合ったツールを見つけることをおすすめします。\n","date":"2023-07-01","permalink":"/blog/githubcopilot-vs-amazoncodewhisperer/","section":"","summary":"こんにちは！オズビジョン開発ユニットの天野です。\n昨今話題になっているAIによるコーディング支援ツール「GitHub Copilot」と「Amazon CodeWhisperer」について、実際に動かしながら比較を行い、実務においても利用価値があるのか調査していきます。\n概要 GitHub Copilotとは？ GitHub Copilotは、OpenAIが開発した人工知能モデル「OpenAI Codex」を使用し、コードや機能をサジェストしてくれる \u0026ldquo;あなたのAIペアプログラマー\u0026rdquo; です。(2022年6月21日一般リリース)\nYour AI pair programmer GitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor.","title":"GitHub CopilotとAmazon CodeWhispererを比較してみた😎"},{"content":"","date":"2023-05-01","permalink":"/tags/news/","section":"Tags","summary":"","title":"News"},{"content":" 自己紹介 オズビジョン開発ユニットの木山です。\n2019年4月に新卒で写真販売サービスの会社へ入社後、WEBサービスのフロント・バックエンドの開発に3年ほど携わり、2023年2月1日にオズビジョンに入社しました！\nカメラや将棋が好きで、休みの日は街中をふらふらして風景を取ったりしています！\nはじめに 自己紹介にもある通り、私はオズビジョンにJOINしてからまだ日が浅く、この2ヶ月でやったことを書くなら今しかない！\nということで、ブログに書かせていただけることになりました！\n私が入社してからやったこと、感じたことをベースにこの2ヶ月についてお話して、その後に私からみたオズビジョンの良い所を4つお伝えしたいと思います。\n\u0026ldquo;入社後ってどんなことするんだろう\u0026hellip;？\u0026rdquo;\n\u0026ldquo;オズビジョンの開発って今こんな雰囲気なんだ\u0026hellip;！\u0026rdquo;\nというのが伝わればと思います！\n転職先としてオズビジョンを選んだ理由は？ 入社後のお話をする前に、入社前のお話も少しだけ\u0026hellip;。\nはじめにある通り、新卒から3年間ほどお世話になった会社から、転職したわけなんですが、その理由と何故オズビジョンを選んだのか？についてお話しします。\n前職でのお話になりますが、新規のサービスの発足直後にその開発チームにジョインし、私とプレイングマネージャーの方、そして営業の方の3人体制でアジャイル開発を行ったことがあります。\n私とプレイングマネージャーとのコミュニケーションはもちろん、営業の方とも密に接し、とにかく困ったり悩んだり、提案したいことがあればbiz, dev関係なく言いたいことを言い合える関係性ができていました。\nbiz側の指標対して開発も意見をし、要件定義を進める際も、チーム一丸となってサービスを良くしよう！という感じが心地よかったのを覚えています。\nしかし、組織改変やチーム変え等もあり、bizとのやりとりをするときは大きめのMTGか、あるいは上司経由で他部署の方とやりとりをする\u0026hellip;といった形に変わりました。\nその頃から、もうちょっと裁量を持ってあのチームの時のようなお仕事ができたら\u0026hellip;！と思うようになったのがきっかけでした。\nそこで、オズビジョンの採用面談では当時ような働き方ができるだろうか・・・？という点を中心に検討しました。\n決め手としては、オズビジョンでは普段から悩んだらすぐにSlackやGoogleMeetなどで相談をする文化になっていて、中規模の案件になってくると、必要な部署から数名ずつでチームを組んでの開発もある\u0026hellip;という所でした！\n他にもたくさんありますが、前述の通り自分の理想の働き方ができそうだったため、オズビジョンへの転職を決意しました。\nでは、次節からは実際に入社してどんなことをやったのか？をお伝えしていきます！\n入社後2ヶ月の軌跡 それでは、入社初日からやったことをご紹介します\u0026hellip;！\nあくまで、私の入社当時の内容となっていますので、その点はご留意いただければと思います！\n入社初日 忘れもしない入社初日！\n現在は原宿に移っているのですが、入社当時は神田近くにある、WeWorkが弊社オフィスでした。\n私はコワーキングスペースとかシェアスペースみたいなのは縁遠く\u0026hellip;\n初めて見た風景でよく知らない人たちがソファに座って作業していたり、コーヒーサーバーでコーヒーを注いでたりしていて\u0026hellip;\n\u0026ldquo;これ、みんな社員の方なんですか！？\u0026rdquo;\n\u0026ldquo;いえいえ、別の企業さんも入っていて、そういった人も使ってる共用スペースです！\u0026rdquo;\nなんて恥ずかしいやりとりもありました笑\nその時点でワクワクだったんですが、その後、業務用のM2MacBookを渡され、会社の説明を聞き、 そして、これから1ヶ月オンボーディングを見てくれる方にお会いして、皆さんとても親切で、さらにこれからが楽しみに！\n入社初日は先輩方と簡単なご挨拶を済ませた後、お昼ご飯を一緒に食べ、PCの初期設定と明日以降やることの確認を行いました。\nそして興奮も冷めやまぬうちに記念すべき初出社の勤務時間が終了しました！\n1週目にやったこと 入社後1週間は主に以下のことを行いました。\n開発環境構築 画面要件習得 これだけだとわかりづらいので、それぞれ詳細に説明していきます！\n開発環境構築 一つ目は開発用のlocal環境構築です。\nオズビジョンでは主に、 Hapitasや Polletを扱っています。\n私はHapitasの開発を行うチームに配属予定だったため、Hapitasの開発環境の構築を行いました。\nHapitasのlocal環境はAnsibleという構成管理ツールで管理をしているため、コマンドを一つ叩けば大部分の環境は整うようになっています。\n実際、コマンドを一つ叩けば必要なdockerコンテナが立ち上がり、各種local用のサーバーの準備はそれで可能です。\nしかし\u0026hellip;私の入社したタイミングから、エンジニアの使うPCがSilicon Macになったため、従来のIntel想定の手順だと少し上手くいかない場所もありました。\nつまづいたら先輩エンジニアに助けを求め、なんとか環境構築をすることができました。\n私の入社当時は業務に慣れるまでは出社し、先輩エンジニアからフォローを受けやすい形になっていて、手厚くフォローしていただきました！\nlocalのサーバーを建てた後はiOSやAndroidのエミュレーターの用意、検証用のWindows仮想環境の用意などを行いました。\n一通り、M2Macで動かせるようになったら、M2Mac用の手順も整備して、次にご説明する画面要件習得に移りました。\n画面要件習得 二つ目は画面要件習得です。\n画面要件習得と聞くとちょっと難しく聞こえますが、つまるところ\u0026hellip;\n\u0026ldquo;手当たり次第Hapitasのサービスを触ってみる\u0026rdquo;\nということです！\nHapitasではユーザー向けの環境として、 パソコン向けの環境、 スマホ向けの環境、 ネイティブアプリ(iOSやAndroid)向けの環境があります。\nまた、さらに社内向けの環境として、広告などを管理する画面があります。\n触る対象も前述の4環境に対して行いました。\n要件と聞くと、一つ一つの入力フォームのバリデーションも細かく検証したりしたの？と思うかもしれませんが、ここではニュアンスが違います。\nあくまで、任意の機能開発に着手する際、なんとなくどこら辺の機能かわかるようにしておき、新しい案件への着手をスムーズにするためです。\nそのため、私の場合はどんな画面があって、各画面どんな役割なんだろう？といった解像度で一通りの機能を触っていきました。\nまた、画面を触りつつその内容をまとめ、後から自分で見返せるようにして、サービス全体を俯瞰したいときに活用しています。\n2週目と3週目にやったこと 2週目、3週目にやったことは以下の通りです。\n画面要件習得 簡単な案件対応 1週目に続き画面要件習得の続きと簡単な案件対応を行いました。\n要件習得は既にお伝えしたので割愛し、簡単な案件対応についてご説明いたします！\n簡単な案件対応 画面要件習得が一段落したら、簡単な案件を割り当ててもらい、仕様の調整やコーディングを含む業務を始めました。\n開発の流れを掴んでもらうことを主旨としていて、案件の内容は複雑ではない文言修正対応から、リンク先差し替え対応などでした。\n私が画面要件習得をする際に見つけたバグや違和感がある文言等があれば、それも合わせて対応しました。\n入社後初めてサービスに対してコミットしたのもこれらの案件対応で、記念すべき初コミットは先輩エンジニアにフォローしてもらいつつリリースしました！\nオズビジョンでの開発もGitHubにてリポジトリを管理しており、基本的にはlocalブランチにて実装、実装した内容をレビューして検証用環境に反映、動作確認をして本番環境へリリースする、といった流れです。\n大まかな流れは前職と一緒だったので、ここはあまり戸惑わずにすみました。\n転職あるあるかもしれませんが、前職でのローカル・検証環境・本番環境の呼称と違っていたり、リポジトリ名が不思議な名称だったのは記憶に残っています。\n後から先輩エンジニアに聞いたところ、環境名やリポジトリ名はあくまで昔の名残で、現在は開発全体の方針としてどんどん一般化していってます。\n4週目以降にやったこと 4週目に入ってからはより本格的な案件に着手させていだだきました。\n社員向けの画面にて毎月行っている登録処理をバッチ化する\u0026hellip;といった内容です。\n実装内容としては技術的に難しい！といった内容ではないんですが\u0026hellip;。\n\u0026ldquo;どのテーブルに保存されている？\u0026rdquo;\n\u0026ldquo;既存だとどういった運用？\u0026rdquo;\n\u0026ldquo;この入力項目の意味って？\u0026rdquo;\nとにかくサービスや裏側の開発に関するドメイン知識がなかったので、手探りで他の部署の方とBacklogやSlack、機会が合えばオフィスで直接やり取りをしつつ、要件を固め、その内容で実装を行いました。\n初めての本格的な案件ということで、先輩エンジニアの方にほぼ専属でフォローしていただいたこともあり、分からない点は即座に質問できたので助かりました！\nこの時から対応していた案件は4月頭にリリースを行い、順調に動いてくれています！\n入社2ヶ月で見えてきたオズビジョンの良い所 さて、入社後の2ヶ月についてお話ししてきました！\nまだまだ2ヶ月程度ではありますが、オズビジョンに期待していた、bizとの密な連携と、チームで一丸となっての開発ができていて入社前とのギャップも比較的小く感じています。\nそんな私からみたオズビジョンの良いと思っている所を4つ、下記の順番でお伝えしたいと思います！\n根拠さえあれば意見に寛容な所 学習についてとても積極的な所 コミュニケーションと人が良い所 新しいオフィス 根拠さえあれば意見に寛容な所 オズビジョンは根拠さえしっかりしていれば、意見が尊重されやすいように思います。\n私の場合、社内のSlackにtimesチャンネルを作り、\u0026ldquo;こうした方がいい気がする\u0026hellip;\u0026ldquo;等呟くのですが、さまざまな方からご意見などをいただけたりします！\nそのため、実装方法といった技術面の内容はもちろん、タスクの進め方やチームの運用方法など、疑問に感じる所、改善できそうな所は意見を出せばみんな考えてくれて、\u0026ldquo;それじゃ来週から試してみましょう！\u0026ldquo;みたなこともあります！\n本当に変えたい、考えたいことがあれば、真摯に受け取っていただけるため、その点はいい所だと思います。\n学習についてとても積極的な所 また、オズビジョンでは毎週1時間ほどの勉強会をやっていて、業務上で活用できそうなことを学び合う場があったりします。\nつい先日はXSSやSQLインジェクション、文字列のエスケープについて気をつけるべきことなどを勉強しました。\n実際にモブプロ的な感じでコードを眺めながら実装時に気をつけて欲しい所などを勉強するのですが、座学中心の勉強会も多い中、本格的だ！と感じたのを覚えています。\n更に、インフラはAWSを中心に活用していることもあり、AWSの LOFTにお邪魔して仕事をしたり、直近だと業務時間を活用し AWS Summitへ参加したエンジニアもいます。\nかくいう私もAWS Summitへ参加させていただきました。\n私はSREチームではないので、日頃からAWSを触るか？というとそうではないのですが\u0026hellip;\nエンジニアで行きたい人は誰でも行って良い（むしろ大歓迎）！ということで、参加させていただきました！\nある程度業務に関連することが前提ではありますが、こういった外部の学習機会に寛容で、積極的なところも良い点だと感じています。\nコミュニケーションと人が良い所 前職だと開発職の人でも、チームごとにバラバラで、他のチームの人とコミュニケーションを取る機会はほぼありませんでした。\nオズビジョンは週に2日、朝会という形で、リモートの人も含めて全エンジニアで集まって、現状の共有や、先週末やったことなどを和気藹々と話し合う場があります。\n日頃からエンジニア同士のコミュニケーションを積極的にしているのですが、パンケーキを食べにいく会が唐突に開かれ、エンジニアがほぼ全員参加したこともあります！\nそういったこともあり、エンジニア同士の中の良さは他社以上なのでは\u0026hellip;！?と思っています。\nまた、前職はフルリモートだったのですが、現在は火曜日と金曜日の週2日、新しいオフィスに出社するようになっていて、他のエンジニアや部署の人とお昼を食べる等、対面でのコミュニケーションをとる良い機会になっています！\nエンジニアだけでなく、biz側ともお互い相談しやすい雰囲気があり、ちょっと困ったらSlackや対面で相談する\u0026hellip;なんてこともよくあります。\n2日出社しないといけないのはつらくない？と思うかもしれませんが、出社時刻は融通がきくため、午前中はリモート、午後から出社したり、逆に午前は出社、午後は早めに帰宅して残りはリモートといった働き方をしている方もいます！\n新しいオフィス また、冒頭で触れたように、最近神田から原宿に オフィスが移転しました！\nこの、新しいオフィスも良い所だと思います\u0026hellip;！\n竹下通りもすぐ近くにあり、お昼ご飯にパンケーキを食べに行ったりしています！\nつい先日、オフィスのすぐ下の階にカフェもでき、カフェでコーヒーを購入している社員さんも増えてきた気がします。\n席は完全フリーアドレスで、1Fがカフェ兼一部執務室、2Fは執務室、屋上も執務可能となっています。\n1Fはカフェスペースと、社員のみ入場可能なスペースがあり、社員のみ入場可能なスペースで一般のカフェにいらっしゃった方を眺めながら執務する\u0026hellip;といったなかなか不思議な体験もできたりします。\n2Fは完全に執務専用スペースでフリーアドレスです。Boxタイプの防音室も3室あり、ソファなども置いてあるので、カジュアルなMTGが毎日行われています。\n3Fは屋上になっていて、屋上にも執務用の机、WiFiが完備されているので、原宿の風景を眺めながら仕事をすることもできます。\n概要としては上記の通りで、私も入社時点で今度移転する旨はお聞きしていたのですが、実際の内容を聞いて驚きました！\n普段なかなかできない体験ができるオフィスになっていて、出社が楽しみです！\n先ほどお伝えした通り、1Fのカフェは、一般の方でも利用可能となっているので、興味を持った方は是非お試しください！\n私のような人間は人生で一回も原宿なんてオシャレな場所にはいかないだろう\u0026hellip;とか思っていましたが、気づけば、\u0026ldquo;週2で原宿\u0026quot;なんて言える人間になりました\u0026hellip;！笑\n最後に 最後になりますが、ここまでお読みいただきありがとうございました！\nオズビジョンの開発組織について、少しでも理解の一助となれば幸いです。\n今回は技術寄りの内容ではなかったのですが、また機会があればもう技術寄りの内容をお伝えできればと思っています！\n","date":"2023-05-01","permalink":"/blog/good-point-from-new-employee/","section":"","summary":"自己紹介 オズビジョン開発ユニットの木山です。\n2019年4月に新卒で写真販売サービスの会社へ入社後、WEBサービスのフロント・バックエンドの開発に3年ほど携わり、2023年2月1日にオズビジョンに入社しました！\nカメラや将棋が好きで、休みの日は街中をふらふらして風景を取ったりしています！\nはじめに 自己紹介にもある通り、私はオズビジョンにJOINしてからまだ日が浅く、この2ヶ月でやったことを書くなら今しかない！\nということで、ブログに書かせていただけることになりました！\n私が入社してからやったこと、感じたことをベースにこの2ヶ月についてお話して、その後に私からみたオズビジョンの良い所を4つお伝えしたいと思います。\n\u0026ldquo;入社後ってどんなことするんだろう\u0026hellip;？\u0026rdquo;\n\u0026ldquo;オズビジョンの開発って今こんな雰囲気なんだ\u0026hellip;！\u0026rdquo;\nというのが伝わればと思います！\n転職先としてオズビジョンを選んだ理由は？ 入社後のお話をする前に、入社前のお話も少しだけ\u0026hellip;。\nはじめにある通り、新卒から3年間ほどお世話になった会社から、転職したわけなんですが、その理由と何故オズビジョンを選んだのか？についてお話しします。\n前職でのお話になりますが、新規のサービスの発足直後にその開発チームにジョインし、私とプレイングマネージャーの方、そして営業の方の3人体制でアジャイル開発を行ったことがあります。\n私とプレイングマネージャーとのコミュニケーションはもちろん、営業の方とも密に接し、とにかく困ったり悩んだり、提案したいことがあればbiz, dev関係なく言いたいことを言い合える関係性ができていました。\nbiz側の指標対して開発も意見をし、要件定義を進める際も、チーム一丸となってサービスを良くしよう！という感じが心地よかったのを覚えています。\nしかし、組織改変やチーム変え等もあり、bizとのやりとりをするときは大きめのMTGか、あるいは上司経由で他部署の方とやりとりをする\u0026hellip;といった形に変わりました。\nその頃から、もうちょっと裁量を持ってあのチームの時のようなお仕事ができたら\u0026hellip;！と思うようになったのがきっかけでした。\nそこで、オズビジョンの採用面談では当時ような働き方ができるだろうか・・・？という点を中心に検討しました。\n決め手としては、オズビジョンでは普段から悩んだらすぐにSlackやGoogleMeetなどで相談をする文化になっていて、中規模の案件になってくると、必要な部署から数名ずつでチームを組んでの開発もある\u0026hellip;という所でした！\n他にもたくさんありますが、前述の通り自分の理想の働き方ができそうだったため、オズビジョンへの転職を決意しました。\nでは、次節からは実際に入社してどんなことをやったのか？をお伝えしていきます！\n入社後2ヶ月の軌跡 それでは、入社初日からやったことをご紹介します\u0026hellip;！\nあくまで、私の入社当時の内容となっていますので、その点はご留意いただければと思います！\n入社初日 忘れもしない入社初日！","title":"転職後2ヶ月の軌跡と、そのエンジニアからみたオズビジョンの良い所！"},{"content":"","date":"2023-03-22","permalink":"/tags/%E7%A4%BE%E5%A4%96%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88/","section":"Tags","summary":"","title":"社外イベント"},{"content":" 自己紹介 初めまして。開発ユニット(ハピタス)の天野です。\n2022年4月に新卒でエンジニアとして入社し、ハピタスの開発を担当しています。\n静岡出身・在住で普段はリモートワークをしています。\n趣味はお笑い・モルック・カラオケ・麻雀・スノボ。\n要約 会社のキーマンに担当プロジェクトでの取り組みを評価していただき、新人の自分が社外イベントに登壇しました。\nこの経験を通じて得た学びを共有させていただきます。\n当日の模様 各社の若手の精鋭が集う中、1年目は自分だけだったので、抜擢されて嬉しかったです。\n続いて静岡県からリモートで勤務を続ける、オズビジョンのエンジニア天野さんより”新人でも展開可能な新しいチャレンジ”を紹介していただきました。”効果と向き合い続ける”をテーマに改善を進めていき、経験値が浅い新人スタッフがグロースさせることができた繰り返し購入可能なアフィリエイト（ハピタス様ではリカーリング案件と呼称）での事例の紹介でした。\n繰り返し可能なアフィリエイト案件=リカーリング案件に注力してグロースさせる際、あくまでもデータを元に仮説・実行と効果検証を繰り返しグロースさせた手腕はデジタリオ（ECナビ運営）の高坂さんから”事業コミットの姿勢がここまであるエンジニアは素晴らしい”と絶賛されました。\n登壇イベントJIPC_当日の記事\n発表スライド：経験の浅い新人でもできる KAIZENの進め方 登壇することになった経緯 ハピタスが掲げている「1度のみ利用可能な案件(新規口座開設やクレジットカード発行等)だけでなく、繰り返し利用可能な案件(楽天市場やYahoo!ショッピングのようなECモール利用等)も収益の柱にしていく」という中長期戦略をもとに発足したプロジェクトを、入社して間もない自分がメンバーの1人として担当したことがきっかけでした。\nプロジェクトの最初のフェーズでは、既存のUIが生み出す効果に悪影響を与えないようにするという方針で、ハピタスアプリを対象に、切り戻し可能な仕様で新たにタブを追加し、繰り返し利用可能案件を表示する専用ページを開発しました。\n新規タブリリース後の効果検証では、悪影響がないことを確認したため、切り戻し不要と判断しました。\n現在は自分がPOとして、リリースした新規タブの機能追加や繰り返し利用可能案件の利用促進に向けた特集ページの作成を行なっています。\n練習の模様 発表2日前から資料作成に取り組み、社内メンバーに向けて発表練習を行いました。\nメンバーからは、「もっと抑揚をつけて話すと伝わりやすい」「発表の山場がわかりやすいスライドだと良い」等のフィードバックをいただき、その都度スライドと発表方法を更新しながら練習を進めました。\n実際に発表してみて 発表して終わりではなく、発表翌日にチームメンバーと相談をして、今回の取り組みの振り返りとナレッジ化を行いました。\n(発表して終わりではなく、経験をナレッジとして残すことが大事。)\n以下、振り返り時のディスカッションのメモです。\nスライド作成のコツ 話す内容をすべて書くのではなく、まず箇条書き。それから膨らませた 手戻りが少なく、FBも反映できる 構成を意識する 自分の写真を登場させた→自分のドヤ感を出す為 この発表の印象をどんなものにしたいか？によってセリフをいれたり、強調するテキストを変えたりしていく 枚数にこだわるより、中身の印象付けが大事(強調のため「効果」だけ書いたスライドを1枚用意した) 見せ方 グラフをいれる→スライドだとみえづらい、、、ちょっと身構えてしまう 読み取って欲しいものだけをテキストに置き換える 今回）結果言いたかったのはコレです！というスライドつくった 聞いている人が理解している範囲と、自分の発表で伝えている内容を一致させていく 今回の例）「ここまでの内容をまとめると」というスライドを要所にいれていった。ブレークポイントを打つ。 スライドが真面目すぎなくてよかった 聞いている人も楽しめる ここで笑って欲しい、クスっとポイントが相手にも伝わっていた ただ情報を伝えるだけでなく、相手も楽しめる発表がよい 「お持ち帰りポイント」という記載があってよかった ワードが柔らかいから良い 聞いてる側がより意識を向けられる。発表の要点が伝えられる。 何を一番伝えたい？というのがわかりやすいようにすると良さそう 発表のコツ 笑いポイントいれる 特に伝えたいことは、ゆっくり話す・タメを作ったりして際立たせる 山場・話の抑揚つける 実際どうだった？掴めた？(自己評価) 100点とは言わないものの、意識して話せた！ 社内と社外発表の違い 社内:ある程度自分のやってきたことを知ってくれているという前提 社外:理解度を合わせていく作業を少し丁寧にやる必要がある 例）自己紹介いれたり、雰囲気の作り方を調整したりする スライドの綺麗さも大事だけど中身が大事！ 終わりに 発表に向けて資料をまとめることで、今までの取り組みを客観的に振り返ることができました。\nまた、普段の業務ではあまり経験することのない、\u0026ldquo;自分の取り組みを、前提知識の無い相手にも伝わるように話す技術\u0026rdquo; を発表を通して少しづつ学ぶことができたました。\nいいきっかけになったので、これからも社外イベントや勉強会があれば参加したいです。是非お誘いください。\n最後まで読んでいただきありがとうございました。\n","date":"2023-03-22","permalink":"/blog/jipc-introduction/","section":"","summary":"自己紹介 初めまして。開発ユニット(ハピタス)の天野です。\n2022年4月に新卒でエンジニアとして入社し、ハピタスの開発を担当しています。\n静岡出身・在住で普段はリモートワークをしています。\n趣味はお笑い・モルック・カラオケ・麻雀・スノボ。\n要約 会社のキーマンに担当プロジェクトでの取り組みを評価していただき、新人の自分が社外イベントに登壇しました。\nこの経験を通じて得た学びを共有させていただきます。\n当日の模様 各社の若手の精鋭が集う中、1年目は自分だけだったので、抜擢されて嬉しかったです。\n続いて静岡県からリモートで勤務を続ける、オズビジョンのエンジニア天野さんより”新人でも展開可能な新しいチャレンジ”を紹介していただきました。”効果と向き合い続ける”をテーマに改善を進めていき、経験値が浅い新人スタッフがグロースさせることができた繰り返し購入可能なアフィリエイト（ハピタス様ではリカーリング案件と呼称）での事例の紹介でした。\n繰り返し可能なアフィリエイト案件=リカーリング案件に注力してグロースさせる際、あくまでもデータを元に仮説・実行と効果検証を繰り返しグロースさせた手腕はデジタリオ（ECナビ運営）の高坂さんから”事業コミットの姿勢がここまであるエンジニアは素晴らしい”と絶賛されました。\n登壇イベントJIPC_当日の記事\n発表スライド：経験の浅い新人でもできる KAIZENの進め方 登壇することになった経緯 ハピタスが掲げている「1度のみ利用可能な案件(新規口座開設やクレジットカード発行等)だけでなく、繰り返し利用可能な案件(楽天市場やYahoo!ショッピングのようなECモール利用等)も収益の柱にしていく」という中長期戦略をもとに発足したプロジェクトを、入社して間もない自分がメンバーの1人として担当したことがきっかけでした。\nプロジェクトの最初のフェーズでは、既存のUIが生み出す効果に悪影響を与えないようにするという方針で、ハピタスアプリを対象に、切り戻し可能な仕様で新たにタブを追加し、繰り返し利用可能案件を表示する専用ページを開発しました。\n新規タブリリース後の効果検証では、悪影響がないことを確認したため、切り戻し不要と判断しました。\n現在は自分がPOとして、リリースした新規タブの機能追加や繰り返し利用可能案件の利用促進に向けた特集ページの作成を行なっています。\n練習の模様 発表2日前から資料作成に取り組み、社内メンバーに向けて発表練習を行いました。\nメンバーからは、「もっと抑揚をつけて話すと伝わりやすい」「発表の山場がわかりやすいスライドだと良い」等のフィードバックをいただき、その都度スライドと発表方法を更新しながら練習を進めました。\n実際に発表してみて 発表して終わりではなく、発表翌日にチームメンバーと相談をして、今回の取り組みの振り返りとナレッジ化を行いました。\n(発表して終わりではなく、経験をナレッジとして残すことが大事。)\n以下、振り返り時のディスカッションのメモです。\nスライド作成のコツ 話す内容をすべて書くのではなく、まず箇条書き。それから膨らませた 手戻りが少なく、FBも反映できる 構成を意識する 自分の写真を登場させた→自分のドヤ感を出す為 この発表の印象をどんなものにしたいか？によってセリフをいれたり、強調するテキストを変えたりしていく 枚数にこだわるより、中身の印象付けが大事(強調のため「効果」だけ書いたスライドを1枚用意した) 見せ方 グラフをいれる→スライドだとみえづらい、、、ちょっと身構えてしまう 読み取って欲しいものだけをテキストに置き換える 今回）結果言いたかったのはコレです！というスライドつくった 聞いている人が理解している範囲と、自分の発表で伝えている内容を一致させていく 今回の例）「ここまでの内容をまとめると」というスライドを要所にいれていった。ブレークポイントを打つ。 スライドが真面目すぎなくてよかった 聞いている人も楽しめる ここで笑って欲しい、クスっとポイントが相手にも伝わっていた ただ情報を伝えるだけでなく、相手も楽しめる発表がよい 「お持ち帰りポイント」という記載があってよかった ワードが柔らかいから良い 聞いてる側がより意識を向けられる。発表の要点が伝えられる。 何を一番伝えたい？というのがわかりやすいようにすると良さそう 発表のコツ 笑いポイントいれる 特に伝えたいことは、ゆっくり話す・タメを作ったりして際立たせる 山場・話の抑揚つける 実際どうだった？掴めた？(自己評価) 100点とは言わないものの、意識して話せた！ 社内と社外発表の違い 社内:ある程度自分のやってきたことを知ってくれているという前提 社外:理解度を合わせていく作業を少し丁寧にやる必要がある 例）自己紹介いれたり、雰囲気の作り方を調整したりする スライドの綺麗さも大事だけど中身が大事！ 終わりに 発表に向けて資料をまとめることで、今までの取り組みを客観的に振り返ることができました。","title":"新卒1年目の自分が社外イベント登壇という大仕事を任され、学んだこと！"},{"content":"","date":"2023-03-16","permalink":"/authors/a-tamura/","section":"Authors","summary":"","title":"a-tamura"},{"content":"開発ユニット(SRE) の田村です。\n今回は、本テックブログの技術スタックについてご紹介いたします。\nテックブログの構成図 GitHub Pages は一つのリポジトリに紐づいた、**.github.io のドメインに、リポジトリ内部のファイルを公開する仕様を持ちます。\nGitHub Actions を利用してソースリポジトリと公開リポジトリを連携しております（上図）\n構成の説明とセットアップフロー テックブログのソースリポジトリを用意する (ex. owner/tech-blog) GitHub Pages の公開リポジトリを用意する (ex. owner/owner.github.io) GitHub Actions を用いて、ソースリポジトリからビルドしたファイルを、公開リポジトリに push する (main マージをトリガーとする) GitHub Pages により **.github.io にテックブログの記事が公開される Amazon Route 53 による CNAME 連携で、techblog.oz-vision.co.jp から **.github.io の公開記事にアクセス可能にする 以上が、テックブログの構成です。\nなぜこのような技術を選定したのか 本テックブログは、「情報発信をしていきたい！」という想いを持つ、開発部のメンバーたちの声から生まれました。\nこの声を早く実現するために、自分たちの環境と親和性が高く、運用保守の観点からもリーズナブルな技術選定が鍵となりました。\n技術スタックの選定 テックブログの選定指針として、下記の三点を念頭に掲げました。\nセキュアであること 低コストであること エンジニアにとって使いやすい執筆環境であること コンテンツ配信技術の選定 基盤となるコンテンツ配信技術で検討した技術スタックは以下となります。\nWordPress 有料ブログサービス 静的サイトジェネレータ オズビジョンではソースコードを Git 上で管理し、 make を利用したワンコマンドでの開発環境構築を実現しています。\nこれを踏襲し、テックブログの技術スタックも、Git + make が候補として浮かびあがりました。\nさらに、普段の開発においても、 GitHub を利用した Pull Request のレビューを実施していることから、ブログの執筆環境も GitHub 管理で一元化させた方が相性が良いというメリットもありました。\nWordPress については、 AWS 上でのサーバ管理が新たに発生し、ローカル環境の構成にも DB が必須となり高コストとなるため却下となりました。\n有料ブログサービスについては、利用にコストが生じることと、そもそも執筆環境を Git 管理できないことから却下となりました。\n静的サイトジェネレータは、セキュアであり、追加コストも掛からず、Git リポジトリ上で管理できることが決め手となり、採用が決定しました。\n静的サイトジェネレータの選定 静的サイトジェネレータには、Reactを利用した Gatsby、Ruby gem で作られた Jekyll、Goによる Hugo が候補に上がりました。\nオズビジョンではモバイルアプリの開発で React Native を利用しています。\nそのため、React ベースの GatsbyJS にはシナジー効果があるとも考えられたのですが、ブログ基盤のローンチを短納期でやり遂げるためにシンプルなコマンド体系で Markdown を静的サイトに変換できる Hugo を選択することとなりました。\n静的ファイルの配信方法の選定 静的サイトジェネレータを構成したので、次は配信手法の確定です。\nオズビジョンでは AWS Well-Architected Framework の セキュリティの柱 のリスク改善を進めています。\n本ブログもセキュリティリスクを鑑み、不用意なシークレットキーの受け渡しを避けたいと考え、GitHub のみで完結させることで、安全な仕組みの構築を目指しました。\nまた、テックブログを、素早く構築しローンチすることを目指した結果、コーディング量を削減する技術スタックを選定しました。\nオズビジョンでは CI/CD サービスに AWS CodePipeline を利用しており、今回もそれを踏襲しようとしていましたが、IAM 系の管理コストが増大するため、GitHub Actionsの採用しました。\nその他、以下の静的配信サービスの利用を検討していましたが、セキュリティ観点から外部サービスとのデータの受け渡しを避けるため却下となりました。\nCloudflare Pages Netlify 結果として、GitHub 内部サービスだけを利用し、ブログ資産の管理(GitHub)、記事の静的配信(GitHub Pages)、本番ビルド(GitHub Actions) を管理する構成となりました。\n選定した技術スタックのメリットについて 今回、本テックブログでは静的サイトジェネレータを採用しましたが、結果として、執筆するメンバーやエンジニアにとっても、「VSCodeなど手慣れたエディタで執筆できる」「GitHub 上のPRフローに乗せて、レビューが可能になる」 メリットが得られました。\n静的サイトジェネレータは、コンテンツ本体が Markdown と画像ファイルの構成となりますので、今後、記事資産を流用しながら改修を行うことが容易となるメリットもありました。\nGitHub Pages によるブログ配信は 2023 年現在では広く使われているものかと思いますが、実際に構築を行ってみると、少ないコード量で本番デプロイまで行えると実感する結果となりました。\n終わりに こちらの記事も GitHub のPRフローに乗せて執筆をしています。\n記事を書きながら、自分では見落としていた誤字脱字や、文章の修正点を、バシバシとレビューをいただき、GitHub でチームメンバーにフィードバックを貰える体制のありがたさを感じています。\nブログ基盤のコーディングよりも、記事の執筆中の方がレビューを頂いているのでは？とも感じて、記事執筆の大変さを実感しております。\nそれでは、次回の記事もよろしくお願いいたします。\n","date":"2023-03-16","permalink":"/blog/blog-tech-stack/","section":"","summary":"開発ユニット(SRE) の田村です。\n今回は、本テックブログの技術スタックについてご紹介いたします。\nテックブログの構成図 GitHub Pages は一つのリポジトリに紐づいた、**.github.io のドメインに、リポジトリ内部のファイルを公開する仕様を持ちます。\nGitHub Actions を利用してソースリポジトリと公開リポジトリを連携しております（上図）\n構成の説明とセットアップフロー テックブログのソースリポジトリを用意する (ex. owner/tech-blog) GitHub Pages の公開リポジトリを用意する (ex. owner/owner.github.io) GitHub Actions を用いて、ソースリポジトリからビルドしたファイルを、公開リポジトリに push する (main マージをトリガーとする) GitHub Pages により **.","title":"テックブログの技術スタック"},{"content":"初めまして。開発ユニット(SRE) の田村です。\nオズビジョンは、ポイントモール「 ハピタス」や、買取サービス「 ポレット」を中心に、お買い物やお出かけをもっと楽しくするサービスを運営しています。\nポイ活でお馴染みのポイントサイト「ハピタス」 フリマより楽な買取サービス「ポレット」 弊社はサービス運営歴がそれなりに長く、これまでにいくつかの技術的なチャレンジや、新たな取り組みを経験してきました。\n私たちの経験や取り組みを、社外向けに情報発信する場として、テックブログを運営していきたいと思います。\nいまのところ以下のような内容で発信を進めていこうと考えています。\n取り入れている技術 開発メンバーの紹介 技術的なチャレンジや取り組み その他、 組織やチームのあり方について このブログを通じて、オズビジョン開発部のことを、みなさまにお届けできればと思います。\n是非ともブログをチェックしてください！\n","date":"2023-03-10","permalink":"/blog/first-post/","section":"","summary":"初めまして。開発ユニット(SRE) の田村です。\nオズビジョンは、ポイントモール「 ハピタス」や、買取サービス「 ポレット」を中心に、お買い物やお出かけをもっと楽しくするサービスを運営しています。\nポイ活でお馴染みのポイントサイト「ハピタス」 フリマより楽な買取サービス「ポレット」 弊社はサービス運営歴がそれなりに長く、これまでにいくつかの技術的なチャレンジや、新たな取り組みを経験してきました。\n私たちの経験や取り組みを、社外向けに情報発信する場として、テックブログを運営していきたいと思います。\nいまのところ以下のような内容で発信を進めていこうと考えています。\n取り入れている技術 開発メンバーの紹介 技術的なチャレンジや取り組み その他、 組織やチームのあり方について このブログを通じて、オズビジョン開発部のことを、みなさまにお届けできればと思います。\n是非ともブログをチェックしてください！","title":"テックブログを開始しました！"},{"content":"","date":"0001-01-01","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"0001-01-01","permalink":"/series/","section":"Series","summary":"","title":"Series"}]