<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OZVISION Tech Blog</title><link>http://techblog.oz-vision.co.jp/</link><description>Recent content on OZVISION Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© OZVISION Inc.</copyright><lastBuildDate>Fri, 29 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://techblog.oz-vision.co.jp/index.xml" rel="self" type="application/rss+xml"/><item><title>CDK v2 の導入でハピタスのインフラが進化！</title><link>http://techblog.oz-vision.co.jp/blog/migration-infra-to-cdkv2/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/migration-infra-to-cdkv2/</guid><description>こんにちは、開発ユニット(SRE) の卜部です。
ハピタスの基盤にはAmazon Web Services（以下AWSと記載）を使用しています。その基盤の運用にはAWS Cloud Development Kit（以下CDKと記載）を2023年1月から導入しました。今回は、CDK v2を使用している経験を共有し、どれだけ運用が向上したかについてお話しします。
メリット TypeScriptとCDKの組み合わせを活用することで、プログラムの記述がスムーズに行え、VSCodeなどのエディタで補完機能が利用でき、関数の説明などが即座に確認できます。 単体テストが容易に実行でき、デグレーションのリスクが低減します。 既存のデプロイ済みリソースとの差分を手元で確認できるため、運用中のトラブルシューティングが効率的に行えます。 リソース間の依存関係や呼び出し関係を視覚的に理解しやすくなりました。 導入前の課題 導入前、手動でAWSコンソール上にリソースを作成する作業と、 CloudFormationテンプレートを使用してリソースの作成、更新、削除を行う作業が混在していました。
また、リソースの命名規則が統一されておらず、リソースの用途が明確でない状態でした。
これにより、どのリソースがどのような目的で構築されたのかを理解することが難しく、調査と運用に余計な時間がかかっていました。
導入のタイミングで行ったこと 言語の選定 フロントエンドでReact + TypeScriptを使用していたため、静的型付け言語であり、エディタの補完機能が優れているTypeScriptを採用しました。 導入計画の策定 新しいリソースの作成にはCDKを使用し、既存のリソースのバージョンアップや変更時にCDKに移行する方針を採用しました。AWS Summit、AWS Dev Dayなどの外部イベントに参加し、AWSのソリューションアーキテクトからの意見も取り入れ、CDKの導入にメリットしか感じなかったため、他の選択肢を検討しなかったのです。 TypeScript + CDKの組み合わせ TypeScriptはフロントエンドやサーバーサイドのエンジニアにとっても馴染み深い言語であり、 リソースの状態を共有するのに適しています。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/migration-infra-to-cdkv2/feature.png"/></item><item><title>ハピタスの「カテゴリーランキング」の新機能にStrategyパターンで実装してみた。</title><link>http://techblog.oz-vision.co.jp/blog/strategy-pattern/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/strategy-pattern/</guid><description>はじめに こんにちは、オズビジョン開発ユニットの李です。ハピタスのトップページにおける新機能「カテゴリーランキング」の開発において、私たちは「Strategyパターン」を学び、その理念を実装に応用しました。この記事では、「Strategyパターン」を用いて新機能を開発する過程について共有いたします。
Strategyパターンの採用理由 「カテゴリーランキング」の要件を確認すると、10個のカテゴリーそれぞれに合致するランキングを表示する必要がありました。初めは、このランキングに対して、以下のようなswitch-case文を用いて実装しました。
switch ($category) { case category1: // category1処理 break; case category2: // category2処理 break; // ... 他のカテゴリーについても同様に記述 case category10: // category10処理 break; } switch-case文を使用することで、上記のようなコードが生まれました。コードの省略があるため、簡潔に見えるかもしれません。省略されたコードを簡単に説明すると、基本各カテゴリー案件の中で、一定期間中に利用数が高い案件を探します。（一部例外があります。）その中で「特定フラグ」、「除外条件」、「カテゴリーの大分類＆小分類連係」など複雑な条件があります。カテゴリ毎に条件が異なるので抽出処理が複雑であります。期間や要件によって、新しいカテゴリーランキングが追加されたり、既存カテゴリーがなくなる可能性があるので、メンテナンスや運用の観点で考える必要がありました。そこで、「もっとスマートな方法はないか？」と考えたところ、「Strategyパターン」の活用についてのレビューコメントが提案されました。その後、「Strategyパターン」の調査を行い、開発と運用の効率性向上が期待できることから、このパターンを採用することを決定しました。このパターンを採用することで、以下の利点が期待されました。
可読性の向上: Strategyパターンは、異なる戦略（Strategy）をクラスとして抽象化し、それぞれの戦略を別々のクラスに分ける方法です。これにより、コードが簡潔で理解しやすくなりました。</description></item><item><title>timesチャンネルを活用したコミュニケーション</title><link>http://techblog.oz-vision.co.jp/blog/times-ch-slack/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/times-ch-slack/</guid><description>こんにちは！
オズビジョン開発ユニット（ハピタス）の天野です。
この記事では、Slack内での「timesチャンネルを活用したコミュニケーション」について紹介します。
timesチャンネルとは何か timesチャンネルは、いわゆる「分報」を共有する場所です。オズビジョンのエンジニアたちは、プロジェクト進行中に気づいたこと、学んだこと、また業務には関係しないが共有したいことなど、自由に情報を発信できます。
開発ユニット（ハピタス）のほぼ半数のエンジニアが自分専用のチャンネルを所有しており、それぞれのチャンネル名は「times-」から始まることで、そのチャンネルがtimesチャンネルであることが明確に示されています。
timesチャンネルの活用例 以下に、実際にtimesチャンネルで活用されている例を紹介します。
簡単な進捗共有 疑問をつぶやく 休憩のお知らせ 特に休憩連絡をするルールはありませんが、個人の気分で「きゅうけいっ」スタンプをtimesチャンネルに投稿することがあります。
トッポ食べたい ランチのメンバーを募集 急遽募集した結果、4人集まりました笑
使ってみたら便利だったツールを共有 timesチャンネルを導入して感じたメリット 質問のハードルが下がった 業務中に疑問が生じた場合、timesチャンネルで簡単に質問できるため、知識豊富なメンバーから迅速な回答を受けることができます。特に、新入社員や特定のドメインに精通していないメンバーにとって、timesチャンネルは知識の補完として非常に役立っています。
知識の共有が促進される 業務中に得た新しい知識や情報をtimesチャンネルにメモすることで、他のメンバーもそれを共有できます。また、このメモはSlackの検索機能で見つけやすいため、将来的に同じ問題にぶつかったときに役立つことがあります。
業務以外の話題で盛り上がれる timesチャンネルの使い方は個人の自由であり、メンバーは休日の旅行写真やランチの内容など、業務以外のトピックについても自由に投稿します。こうした楽しい話題を通じて、チームメンバー同士の関係性が深まったり、「人となり」を知れたりします。
業務以外の話題を共有できるtimesチャンネルは、コミュニケーションの促進と楽しい雰囲気作りにもつながっています。
感想 2023年9月現在、弊社では週に2日の出社が原則となっています。このため、リモートワーク中のメンバーとのコミュニケーションも重要です。timesチャンネルは、テキストベースのコミュニケーションを円滑にし、リモート環境でのコミュニケーションに役立っています。
最後までお読みいただき、ありがとうございました。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/times-ch-slack/feature.png"/></item><item><title>SymfonyによるN+1の速度比較をやってみた！</title><link>http://techblog.oz-vision.co.jp/blog/symfony-n1/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/symfony-n1/</guid><description>はじめに こんにちは！
オズビジョン開発ユニット（ハピタス）の木山です。
今回はWebの開発をする上でよく耳にするN+1問題についてSymfonyとMySQLの環境で検証をしてみようと思います！
N+1問題とは？ まずはじめにN+1問題について簡単におさらいしておきます。
前提として、データベースにUsersテーブルとCommentsテーブルが存在している簡単なSNSアプリケーションを考えてみます。
ここで、全ユーザーの全コメントを表示する機能を実装したいです。
その際、UsersテーブルからUserの一覧を取得し、各ユーザーのIDを用いてCommentsテーブルのユーザーに紐づくデータも取得します。
この際、発行されるクエリに着目をすると、
// UsersテーブルからUserのid一覧を取得 select id from Users; // Commentsテーブルから特定UserのCommentを取得 （これをUserの人数分繰り返す） select * from Comments where user_id = ?; 上記のようなクエリになります。
例えばユーザーが10人いると、以下のようなイメージです。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/symfony-n1/feature.png"/></item><item><title>金曜日はビアバッシュで乾杯して帰ろう🍻</title><link>http://techblog.oz-vision.co.jp/blog/beerbash/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/beerbash/</guid><description>こんにちは！オズビジョン開発ユニット（ハピタス）の天野です。
今回は、開発ユニットの週末イベント「ビアバッシュ」について紹介します。
ビアバッシュの概要 毎週金曜日、終業前の30分を利用して、特別なイベント「ビアバッシュ」を開催しています。このイベントは、その週に感謝したい人々への「ありがとう」を送り、お互いを讃え合うことを目的としています。弊社は火曜日と金曜日に出社日を設けているため、金曜日にはオフィスにいるメンバーがリアルでお酒を楽しむこともあります。
（トップの画像はオンライン開催時にみんなで乾杯した時の写真です。）
ビアバッシュ中にメンバーは専用のSlackチャンネル「thanksありがとう」を通じて感謝のメッセージを共有しています。
感謝のメッセージ例 専用のSlackチャンネルで実際に送られるメッセージを紹介します。
このように、メッセージを送ると大量のスタンプが付くことがあります笑
僕もいつも大量にスタンプを送りつけています。
仕事終わりでみんなテンションが高いです。
ビアバッシュを通じて得られたもの ①日頃の感謝を改めて言葉にできる 通常の業務の中で、お世話になっているメンバーは多いことでしょう。しかし、直接感謝の気持ちを伝えるのは、時には照れくさいことや適切なタイミングを見計らう難しさがあります。そこで、「感謝を伝える場」を設けることで、日頃の感謝の気持ちを改めて言葉にする機会が得られます。
②他部署メンバーとのコミュニケーションの場にもなる ビアバッシュはもともとエンジニア内で始まりましたが、プロジェクトで関わった他部署メンバーへのメッセージが増えていきました。徐々にエンジニア以外のメンバーも参加するようになり、ちょっとした交流の場になっています。
③感謝されることの喜び やはり、誰かに感謝されるととても嬉しいです。他のメンバーからの感謝の言葉は、自身の仕事への取り組みと貢献が認められていることを示しています。また、何気ない自分の行動が誰かにとっては大きな助けになっていることに気づくことができます。この結果、モチベーションの向上につながり、メンバー全体の働きやすさを高めています。
終わりに 弊社オズビジョンのビアバッシュは、感謝と交流を重視した特別なイベントです。週の疲れを癒し、新たなエネルギーをチームに注入する場として、価値を提供しています。あなたのチームでも、ビアバッシュを通じて感謝の輪を広げ、一体感を育んでみてはいかがでしょうか。
最後まで読んでいただきありがとうございました。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/beerbash/feature.png"/></item><item><title>レビュー指摘をチーム全体に浸透させる取り組み</title><link>http://techblog.oz-vision.co.jp/blog/make-the-review-points-permeate/</link><pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/make-the-review-points-permeate/</guid><description>こんにちは！オズビジョン開発ユニット(ハピタス)の天野です。
この記事では、私たちが実践している「チーム全体でレビュー指摘（フィードバック）を共有する取り組み」について紹介します。
要約 プロジェクトごとに別チームで開発する開発ユニット(ハピタス)は、有益な知識とフィードバックを共有する必要性を感じ、週1回のミーティングでレビュー指摘をまとめたリストを振り返る時間を作りました。具体的な指摘を共有し、100件の知識抽出と改善を実現。レビュアーとレビュイーからの声も好評。これからも価値ある情報を共有する「お焚き上げ」プロセスを通じて、チームの改善を進めていく予定です。
背景 開発ユニット(ハピタス)は、プロジェクトごとに別々のチームで開発しています。これまではコードレビューが品質保証の一環として行われてきましたが、有益な知識やフィードバックが他のチームメンバーと共有されるべきだという考えから、過去のレビュー指摘を振り返り、他チームへのフィードバックも垣根を越えて横展開するための場を設けました。
取り組み内容 週に1度、全体ミーティングで、レビュー指摘のフィードバックがまとめられたスプレッドシートを共有しています。
このスプレッドシートは日々更新され、必要に応じて新しいフィードバックが追加されます。
ミーティングでは、以下の情報を確認します。
差し戻し理由 改善または継続の状態 差し戻しの詳細内容 差し戻し理由の詳細 提案事項 具体的な指摘のURL 確認日 この場で、指摘したメンバーからの解説と他メンバーからの質問が行われます。解説の中で具体的な指摘の例を示し、チームの理解度・浸透度が低い指摘については引き続き振り返るようにしています。通常、1回のミーティングで4~6件の指摘を取り上げます。
さらに、チェックリストが増え続けるため、定期的に内容を整理し、組織内で共有済みと認識されるフィードバックや学びを「お焚き上げ」としてマークし、今後確認する必要がないものとして取り扱っています。
実績 この取り組みを半年間続けた結果、約100件の知識抽出と横展開が実現しました。
レビュアーからの声 「指摘を受けた人以外も意識してコードを書く場面が増えてきた」 「以前の指摘をレビュアーも振り返れるようになった」 「同じ指摘が減ってきた」 レビュイーからの声 「XSSエスケープへの意識が高まり、セキュリティ指摘が減少」 「新メンバーも以前の知見を追えるようになった」 感想 知識を蓄積する行為は容易ですが、それをチーム全体に共有することに大きな重要性があると考えます。特に、組織全体で共有される価値があると認識された情報を整理する「お焚き上げ」のプロセスは、大きな価値を持つ行動と言えるでしょう。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/make-the-review-points-permeate/feature.png"/></item><item><title>ハピタス開発チームの品質向上に向けたアプローチ</title><link>http://techblog.oz-vision.co.jp/blog/specification-reviews-in-ozvision/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/specification-reviews-in-ozvision/</guid><description>こんにちは！オズビジョン開発ユニットの天野です。
今回は、ハピタス開発チームが行っている品質改善の取り組みをご紹介します。
要約 弊社のサービス ハピタス は、常に新しい機能をリリースしています。
これらの新機能は、既存の仕様に影響を与える場合もあります。
そのため、私たちは設計段階で「案件説明会」という名のMTGを開催し、ハピタス開発チーム全体でレビューを徹底して行っています。
このアプローチにより、サービスの品質を向上させると同時に、不十分な設計や考慮漏れによる事故を未然に防ぐことを目指しています。
また、自分の担当範囲外の機能開発についてもキャッチアップすることで、より広い視野での成長を目指しています。
なぜ始めたのか 以前は、その機能の開発を担当するメンバーが独自で設計を行っていましたが、他で並行して進めている開発と修正が重複したり、既存仕様に意図しない影響を及ぼしてしまうことがありました。そこで、設計段階で詳しいメンバーによるレビューと進行中の他の機能開発との影響確認のためのMTGを開始しました。
最初は詳しいメンバーと担当者のみの参加でしたが、より広範囲での情報共有を図るために現在はハピタス開発チーム全員の参加を基本としています。
具体的な取り組み 会議体 週に1度、ハピタス開発チーム全員が参加するMTGを設定しています。
新機能の要件が一定程度決まり、開発側が要件定義を進めるタイミングで案件説明会を行います。
進め方 要件定義のフォーマットに従い、担当者が事前に作成した要件定義書をもとに画面共有しながら全体に共有していきます。
機能によってはスプレッドシートやFigmaを使って共有することもあります。
要件定義フォーマットの一部
# 案件概要 - 開発する機能の説明 - 目的 - 企画の主担当 - 画面イメージ # 仕様定義 ## 機能要件 - 開発スコープ - 改修箇所 - データベースへの影響があるか - バッチ処理が必要か - 管理画面の開発を行うか ## 非機能要件 - マイルストーン - データ集計・効果測定の仕組み - 監視 - 性能 - セキュリティ 共有が終わった後は、メンバーからのフィードバックや質問の時間を設けています。フィードバックでは、仕様に関するものやセキュリティ対策、テーブル設計など様々な観点からアドバイスをいただきます。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/specification-reviews-in-ozvision/feature.png"/></item><item><title>AWS New Gradsの体験共有と所感について</title><link>http://techblog.oz-vision.co.jp/blog/aws-new-grads/</link><pubDate>Wed, 12 Jul 2023 15:04:05 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/aws-new-grads/</guid><description>こんにちは！
オズビジョン開発ユニットの木山です。
先月初めてAWS New Gradsという初学者向けの研修に参加しました。
それはとても素晴らしい経験だったので、今日はこのブログでその経験をシェアしたいと思います。
AWS New Gradsとは？ まず始めに、「AWS New Gradsって何？」と思っている方もいるかもしれませんね。
AWS New Gradsは、基本的に新卒1年目の方を対象にしたAWS公式の研修プログラムです。
私が参加したのは &amp;ldquo;AWS JumpStart 2023 for NewGrads 設計編&amp;quot;というセッションでした。
公式の情報によると、
&amp;ldquo;クラウドの入り口となるパートナー限定セミナーです。新入社員に特化したトレーニング「AWS New Grads Training」そして、新入社員以外の皆様向けトレーニング「はじめてのクラウド」を開催しています。「クラウドとは？」といった内容からAWSの学び方までお伝えします。IT初心者にも伝わる構成となっており、AWSを学ぶ最初の一歩として広くご利用いただけるセミナーです。&amp;rdquo;
AWS 初学者向け AWS パートナーのラーニングパスご紹介</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/aws-new-grads/feature.png"/></item><item><title>GitHub CopilotとAmazon CodeWhispererを比較してみた😎</title><link>http://techblog.oz-vision.co.jp/blog/githubcopilot-vs-amazoncodewhisperer/</link><pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/githubcopilot-vs-amazoncodewhisperer/</guid><description>こんにちは！オズビジョン開発ユニットの天野です。
昨今話題になっているAIによるコーディング支援ツール「GitHub Copilot」と「Amazon CodeWhisperer」について、実際に動かしながら比較を行い、実務においても利用価値があるのか調査していきます。
概要 GitHub Copilotとは？ GitHub Copilotは、OpenAIが開発した人工知能モデル「OpenAI Codex」を使用し、コードや機能をサジェストしてくれる &amp;ldquo;あなたのAIペアプログラマー&amp;rdquo; です。(2022年6月21日一般リリース)
Your AI pair programmer GitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/githubcopilot-vs-amazoncodewhisperer/feature.png"/></item><item><title>転職後2ヶ月の軌跡と、そのエンジニアからみたオズビジョンの良い所！</title><link>http://techblog.oz-vision.co.jp/blog/good-point-from-new-employee/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/good-point-from-new-employee/</guid><description>自己紹介 オズビジョン開発ユニットの木山です。
2019年4月に新卒で写真販売サービスの会社へ入社後、WEBサービスのフロント・バックエンドの開発に3年ほど携わり、2023年2月1日にオズビジョンに入社しました！
カメラや将棋が好きで、休みの日は街中をふらふらして風景を取ったりしています！
はじめに 自己紹介にもある通り、私はオズビジョンにJOINしてからまだ日が浅く、この2ヶ月でやったことを書くなら今しかない！
ということで、ブログに書かせていただけることになりました！
私が入社してからやったこと、感じたことをベースにこの2ヶ月についてお話して、その後に私からみたオズビジョンの良い所を4つお伝えしたいと思います。
&amp;ldquo;入社後ってどんなことするんだろう&amp;hellip;？&amp;rdquo;
&amp;ldquo;オズビジョンの開発って今こんな雰囲気なんだ&amp;hellip;！&amp;rdquo;
というのが伝わればと思います！
転職先としてオズビジョンを選んだ理由は？ 入社後のお話をする前に、入社前のお話も少しだけ&amp;hellip;。
はじめにある通り、新卒から3年間ほどお世話になった会社から、転職したわけなんですが、その理由と何故オズビジョンを選んだのか？についてお話しします。
前職でのお話になりますが、新規のサービスの発足直後にその開発チームにジョインし、私とプレイングマネージャーの方、そして営業の方の3人体制でアジャイル開発を行ったことがあります。
私とプレイングマネージャーとのコミュニケーションはもちろん、営業の方とも密に接し、とにかく困ったり悩んだり、提案したいことがあればbiz, dev関係なく言いたいことを言い合える関係性ができていました。
biz側の指標対して開発も意見をし、要件定義を進める際も、チーム一丸となってサービスを良くしよう！という感じが心地よかったのを覚えています。
しかし、組織改変やチーム変え等もあり、bizとのやりとりをするときは大きめのMTGか、あるいは上司経由で他部署の方とやりとりをする&amp;hellip;といった形に変わりました。
その頃から、もうちょっと裁量を持ってあのチームの時のようなお仕事ができたら&amp;hellip;！と思うようになったのがきっかけでした。
そこで、オズビジョンの採用面談では当時ような働き方ができるだろうか・・・？という点を中心に検討しました。
決め手としては、オズビジョンでは普段から悩んだらすぐにSlackやGoogleMeetなどで相談をする文化になっていて、中規模の案件になってくると、必要な部署から数名ずつでチームを組んでの開発もある&amp;hellip;という所でした！
他にもたくさんありますが、前述の通り自分の理想の働き方ができそうだったため、オズビジョンへの転職を決意しました。
では、次節からは実際に入社してどんなことをやったのか？をお伝えしていきます！
入社後2ヶ月の軌跡 それでは、入社初日からやったことをご紹介します&amp;hellip;！
あくまで、私の入社当時の内容となっていますので、その点はご留意いただければと思います！
入社初日 忘れもしない入社初日！</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/good-point-from-new-employee/feature.jpg"/></item><item><title>新卒1年目の自分が社外イベント登壇という大仕事を任され、学んだこと！</title><link>http://techblog.oz-vision.co.jp/blog/jipc-introduction/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/jipc-introduction/</guid><description>自己紹介 初めまして。開発ユニット(ハピタス)の天野です。
2022年4月に新卒でエンジニアとして入社し、ハピタスの開発を担当しています。
静岡出身・在住で普段はリモートワークをしています。
趣味はお笑い・モルック・カラオケ・麻雀・スノボ。
要約 会社のキーマンに担当プロジェクトでの取り組みを評価していただき、新人の自分が社外イベントに登壇しました。
この経験を通じて得た学びを共有させていただきます。
当日の模様 各社の若手の精鋭が集う中、1年目は自分だけだったので、抜擢されて嬉しかったです。
続いて静岡県からリモートで勤務を続ける、オズビジョンのエンジニア天野さんより”新人でも展開可能な新しいチャレンジ”を紹介していただきました。”効果と向き合い続ける”をテーマに改善を進めていき、経験値が浅い新人スタッフがグロースさせることができた繰り返し購入可能なアフィリエイト（ハピタス様ではリカーリング案件と呼称）での事例の紹介でした。
繰り返し可能なアフィリエイト案件=リカーリング案件に注力してグロースさせる際、あくまでもデータを元に仮説・実行と効果検証を繰り返しグロースさせた手腕はデジタリオ（ECナビ運営）の高坂さんから”事業コミットの姿勢がここまであるエンジニアは素晴らしい”と絶賛されました。
登壇イベントJIPC_当日の記事
発表スライド：経験の浅い新人でもできる KAIZENの進め方 登壇することになった経緯 ハピタスが掲げている「1度のみ利用可能な案件(新規口座開設やクレジットカード発行等)だけでなく、繰り返し利用可能な案件(楽天市場やYahoo!ショッピングのようなECモール利用等)も収益の柱にしていく」という中長期戦略をもとに発足したプロジェクトを、入社して間もない自分がメンバーの1人として担当したことがきっかけでした。
プロジェクトの最初のフェーズでは、既存のUIが生み出す効果に悪影響を与えないようにするという方針で、ハピタスアプリを対象に、切り戻し可能な仕様で新たにタブを追加し、繰り返し利用可能案件を表示する専用ページを開発しました。
新規タブリリース後の効果検証では、悪影響がないことを確認したため、切り戻し不要と判断しました。
現在は自分がPOとして、リリースした新規タブの機能追加や繰り返し利用可能案件の利用促進に向けた特集ページの作成を行なっています。
練習の模様 発表2日前から資料作成に取り組み、社内メンバーに向けて発表練習を行いました。
メンバーからは、「もっと抑揚をつけて話すと伝わりやすい」「発表の山場がわかりやすいスライドだと良い」等のフィードバックをいただき、その都度スライドと発表方法を更新しながら練習を進めました。
実際に発表してみて 発表して終わりではなく、発表翌日にチームメンバーと相談をして、今回の取り組みの振り返りとナレッジ化を行いました。
(発表して終わりではなく、経験をナレッジとして残すことが大事。)
以下、振り返り時のディスカッションのメモです。
スライド作成のコツ 話す内容をすべて書くのではなく、まず箇条書き。それから膨らませた 手戻りが少なく、FBも反映できる 構成を意識する 自分の写真を登場させた→自分のドヤ感を出す為 この発表の印象をどんなものにしたいか？によってセリフをいれたり、強調するテキストを変えたりしていく 枚数にこだわるより、中身の印象付けが大事(強調のため「効果」だけ書いたスライドを1枚用意した) 見せ方 グラフをいれる→スライドだとみえづらい、、、ちょっと身構えてしまう 読み取って欲しいものだけをテキストに置き換える 今回）結果言いたかったのはコレです！というスライドつくった 聞いている人が理解している範囲と、自分の発表で伝えている内容を一致させていく 今回の例）「ここまでの内容をまとめると」というスライドを要所にいれていった。ブレークポイントを打つ。 スライドが真面目すぎなくてよかった 聞いている人も楽しめる ここで笑って欲しい、クスっとポイントが相手にも伝わっていた ただ情報を伝えるだけでなく、相手も楽しめる発表がよい 「お持ち帰りポイント」という記載があってよかった ワードが柔らかいから良い 聞いてる側がより意識を向けられる。発表の要点が伝えられる。 何を一番伝えたい？というのがわかりやすいようにすると良さそう 発表のコツ 笑いポイントいれる 特に伝えたいことは、ゆっくり話す・タメを作ったりして際立たせる 山場・話の抑揚つける 実際どうだった？掴めた？(自己評価) 100点とは言わないものの、意識して話せた！ 社内と社外発表の違い 社内:ある程度自分のやってきたことを知ってくれているという前提 社外:理解度を合わせていく作業を少し丁寧にやる必要がある 例）自己紹介いれたり、雰囲気の作り方を調整したりする スライドの綺麗さも大事だけど中身が大事！ 終わりに 発表に向けて資料をまとめることで、今までの取り組みを客観的に振り返ることができました。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/jipc-introduction/feature.png"/></item><item><title>テックブログの技術スタック</title><link>http://techblog.oz-vision.co.jp/blog/blog-tech-stack/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/blog-tech-stack/</guid><description>開発ユニット(SRE) の田村です。
今回は、本テックブログの技術スタックについてご紹介いたします。
テックブログの構成図 GitHub Pages は一つのリポジトリに紐づいた、**.github.io のドメインに、リポジトリ内部のファイルを公開する仕様を持ちます。
GitHub Actions を利用してソースリポジトリと公開リポジトリを連携しております（上図）
構成の説明とセットアップフロー テックブログのソースリポジトリを用意する (ex. owner/tech-blog) GitHub Pages の公開リポジトリを用意する (ex. owner/owner.github.io) GitHub Actions を用いて、ソースリポジトリからビルドしたファイルを、公開リポジトリに push する (main マージをトリガーとする) GitHub Pages により **.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/blog-tech-stack/feature.png"/></item><item><title>テックブログを開始しました！</title><link>http://techblog.oz-vision.co.jp/blog/first-post/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>http://techblog.oz-vision.co.jp/blog/first-post/</guid><description>初めまして。開発ユニット(SRE) の田村です。
オズビジョンは、ポイントモール「 ハピタス」や、買取サービス「 ポレット」を中心に、お買い物やお出かけをもっと楽しくするサービスを運営しています。
ポイ活でお馴染みのポイントサイト「ハピタス」 フリマより楽な買取サービス「ポレット」 弊社はサービス運営歴がそれなりに長く、これまでにいくつかの技術的なチャレンジや、新たな取り組みを経験してきました。
私たちの経験や取り組みを、社外向けに情報発信する場として、テックブログを運営していきたいと思います。
いまのところ以下のような内容で発信を進めていこうと考えています。
取り入れている技術 開発メンバーの紹介 技術的なチャレンジや取り組み その他、 組織やチームのあり方について このブログを通じて、オズビジョン開発部のことを、みなさまにお届けできればと思います。
是非ともブログをチェックしてください！</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="http://techblog.oz-vision.co.jp/blog/first-post/feature.png"/></item></channel></rss>